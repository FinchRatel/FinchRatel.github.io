<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远上寒山石径斜</title>
  
  <subtitle>白云深处有人家</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://finchratel.github.io/"/>
  <updated>2018-12-06T08:08:11.773Z</updated>
  <id>https://finchratel.github.io/</id>
  
  <author>
    <name>Finch Ratel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS · Flex</title>
    <link href="https://finchratel.github.io/2018/12/06/web-learn-001/"/>
    <id>https://finchratel.github.io/2018/12/06/web-learn-001/</id>
    <published>2018-12-06T07:53:15.000Z</published>
    <updated>2018-12-06T08:08:11.773Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CSS · Flex</strong></p><a id="more"></a><p><code>main axis</code> 主轴<br><code>main start</code> 主轴起点<br><code>main end</code> 主轴终点<br><code>main size</code> 主轴方向大小</p><p><code>cross axis</code> 交叉轴<br><code>cross start</code> 交叉轴起点<br><code>cross end</code> 交叉轴终点<br><code>cross size</code> 交叉轴方向大小</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p><code>display: flex</code></p><ul><li>指定flex布局，此时<code>float</code>、<code>clear</code>、<code>vertical-align</code>属性将失效</li></ul><p><code>flex-direction</code> 主轴方向</p><ul><li><code>row</code> 默认 主轴为水平方向，起点在左端</li><li><code>row-reverse</code> 主轴为水平方向，起点在右端</li><li><code>column</code> 主轴为垂直方向，起点在上端</li><li><code>column-reverse</code> 主轴为垂直方向，起点在下端</li></ul><p><code>flex-wrap</code> 是否换行</p><ul><li><code>nowrap</code> 默认 不换行</li><li><code>wrap</code> 换行</li><li><code>wrap-reverse</code> 换行</li></ul><p><code>flex-flow</code> 主轴方向和是否换行</p><ul><li><code>row nowrap</code> 默认</li><li><code>flex-direction</code> 和 <code>flex-wrap</code> 的缩写</li></ul><p><code>justify-content</code> 主轴对齐方式</p><ul><li><code>flex-start</code> 默认 主轴起点对齐</li><li><code>flex-end</code> 主轴终点对齐</li><li><code>center</code> 主轴居中对齐</li><li><code>space-between</code> 主轴两端对齐</li><li><code>space-around</code> 间隔相等</li></ul><p><code>align-items</code> 交叉轴对齐方式</p><ul><li><code>stretch</code> 默认 拉伸 如果未设置高度或设置为auto，将占满整个高度</li><li><code>flex-start</code> 交叉轴起点对齐</li><li><code>flex-end</code> 交叉轴终点对齐</li><li><code>center</code> 交叉轴居中对齐</li><li><code>baseline</code> 第一行文字的基线对齐</li></ul><p><code>align-content</code> 多根轴线的对齐方式，一根轴线时不生效</p><ul><li><code>stretch</code> 默认 拉伸 占满整个交叉轴</li><li><code>flex-start</code> 与交叉轴的起点对齐</li><li><code>flex-end</code> 与交叉轴的终点对齐</li><li><code>center</code> 与交叉轴的中点对齐</li><li><code>space-between</code> 交叉轴两端对齐</li><li><code>space-around</code> 间隔相等</li></ul><h3 id="子项"><a href="#子项" class="headerlink" title="子项"></a>子项</h3><p><code>order</code></p><ul><li>0 默认</li><li>子项的排列顺序，数字越小越靠前</li></ul><p><code>flex-grow</code></p><ul><li>子项放大比例</li><li>0 默认 不放大</li></ul><p><code>flex-shirnk</code></p><ul><li>子项缩小比例</li><li>1 默认</li><li>0 不缩小</li></ul><p><code>flex-basis</code></p><ul><li>在分配多余空间之前，子项占据的主轴空间(main size)</li><li>auto 默认</li></ul><p><code>flex</code></p><ul><li><code>flex-grow</code> <code>flex-shirnk</code> <code>flex-basis</code>的简写</li><li><code>0 1 auto</code> 默认</li></ul><p><code>align-self</code></p><ul><li>子项对齐方式，覆盖<code>align-items</code></li><li>auto 默认 继承父元素的<code>align-items</code></li></ul><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><p>一种常见的页面布局，顶部<code>header</code>，左侧<code>nav</code>，右侧<code>content</code><br><img src="/images/flex-layout.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>content<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">56px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">56px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#cfcfcf</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#dfdfdf</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#efefef</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CSS · Flex&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://finchratel.github.io/categories/web/"/>
    
    
      <category term="flex" scheme="https://finchratel.github.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Reflect</title>
    <link href="https://finchratel.github.io/2018/12/04/es6-learn-006/"/>
    <id>https://finchratel.github.io/2018/12/04/es6-learn-006/</id>
    <published>2018-12-04T06:41:28.000Z</published>
    <updated>2018-12-04T06:55:57.660Z</updated>
    
    <content type="html"><![CDATA[<p>Reflect.get()<br>Reflect.set()<br>Reflect.has()<br>Reflect.deleteProperty()<br>Reflect.construct()<br>Reflect.getPrototypeOf()<br>Reflect.setPrototypeOf()<br>Reflect.apply()<br>Reflect.defineProperty()<br>Reflect.getOwnPropertyDescriptor()<br>Reflect.isExtensible()<br>Reflect.preventExtensions()<br>Reflect.ownKeys()</p><a id="more"></a><h3 id="Reflect-get-target-name-receiver"><a href="#Reflect-get-target-name-receiver" class="headerlink" title="Reflect.get(target, name, receiver)"></a>Reflect.get(target, name, receiver)</h3><p>查找并返回target.name<br>如果name属性部署了getter，getter的this绑定receiver</p><h3 id="Reflect-set-target-name-value-receiver"><a href="#Reflect-set-target-name-value-receiver" class="headerlink" title="Reflect.set(target, name, value, receiver)"></a>Reflect.set(target, name, value, receiver)</h3><p>设置target的name属性值为value<br>如果name属性部署了setter，setter的this绑定receiver</p><h3 id="Reflect-has-obj-name"><a href="#Reflect-has-obj-name" class="headerlink" title="Reflect.has(obj, name)"></a>Reflect.has(obj, name)</h3><p>等同于 name in obj</p><h3 id="Reflect-deleteProperty-obj-name"><a href="#Reflect-deleteProperty-obj-name" class="headerlink" title="Reflect.deleteProperty(obj, name)"></a>Reflect.deleteProperty(obj, name)</h3><p>等同于 delete obj.name</p><h3 id="Reflect-construct-target-args"><a href="#Reflect-construct-target-args" class="headerlink" title="Reflect.construct(target, args)"></a>Reflect.construct(target, args)</h3><p>等同于 new target(…args)<br>不使用new调用构造函数的方式</p><h3 id="Reflect-getPrototypeOf-obj"><a href="#Reflect-getPrototypeOf-obj" class="headerlink" title="Reflect.getPrototypeOf(obj)"></a>Reflect.getPrototypeOf(obj)</h3><p>等同于 Object.getPrototypeOf(obj)<br>读取obj的<strong>proto</strong>属性</p><h3 id="Reflect-setPrototypeOf-obj-newProto"><a href="#Reflect-setPrototypeOf-obj-newProto" class="headerlink" title="Reflect.setPrototypeOf(obj, newProto)"></a>Reflect.setPrototypeOf(obj, newProto)</h3><p>等同于 Object.setPrototypeOf(obj, newProto)</p><h3 id="Reflect-apply-func-thisArgs-args"><a href="#Reflect-apply-func-thisArgs-args" class="headerlink" title="Reflect.apply(func, thisArgs, args)"></a>Reflect.apply(func, thisArgs, args)</h3><p>等同于 Function.prototype.apply.call(func, thisArgs, args)</p><h3 id="Reflect-defineProperty-target-propertyKey-attributies"><a href="#Reflect-defineProperty-target-propertyKey-attributies" class="headerlink" title="Reflect.defineProperty(target, propertyKey, attributies)"></a>Reflect.defineProperty(target, propertyKey, attributies)</h3><p>等同于 Object.defineProperty(target, propertyKey, attiruties)</p><h3 id="Reflect-getOwnPropertyDescriptor-target-propertyKey"><a href="#Reflect-getOwnPropertyDescriptor-target-propertyKey" class="headerlink" title="Reflect.getOwnPropertyDescriptor(target, propertyKey)"></a>Reflect.getOwnPropertyDescriptor(target, propertyKey)</h3><p>等同于 Object.getOwnPropertyDescriptor(target, propertyKey)</p><h3 id="Reflect-isExtensible-target"><a href="#Reflect-isExtensible-target" class="headerlink" title="Reflect.isExtensible(target)"></a>Reflect.isExtensible(target)</h3><p>等同于 Object.isExtensible(target)<br>target是否可扩展，返回布尔值</p><h3 id="Reflect-preventExtensible-target"><a href="#Reflect-preventExtensible-target" class="headerlink" title="Reflect.preventExtensible(target)"></a>Reflect.preventExtensible(target)</h3><p>等同于 Object.preventExtensible(target)<br>让target不可扩展</p><h3 id="Reflect-ownKeys-target"><a href="#Reflect-ownKeys-target" class="headerlink" title="Reflect.ownKeys(target)"></a>Reflect.ownKeys(target)</h3><p>等同于 Object.ownKeys(target)<br>返回一个对象的所有属性<br>Object.getOwnPropertyNames + Object.getOwnPropertySymbols</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reflect.get()&lt;br&gt;Reflect.set()&lt;br&gt;Reflect.has()&lt;br&gt;Reflect.deleteProperty()&lt;br&gt;Reflect.construct()&lt;br&gt;Reflect.getPrototypeOf()&lt;br&gt;Reflect.setPrototypeOf()&lt;br&gt;Reflect.apply()&lt;br&gt;Reflect.defineProperty()&lt;br&gt;Reflect.getOwnPropertyDescriptor()&lt;br&gt;Reflect.isExtensible()&lt;br&gt;Reflect.preventExtensions()&lt;br&gt;Reflect.ownKeys()&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="es6-reflect" scheme="https://finchratel.github.io/tags/es6-reflect/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Class继承</title>
    <link href="https://finchratel.github.io/2018/11/30/es6-learn-005/"/>
    <id>https://finchratel.github.io/2018/11/30/es6-learn-005/</id>
    <published>2018-11-30T08:22:01.000Z</published>
    <updated>2018-12-03T07:18:43.916Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ES6 · Class继承</strong></p><a id="more"></a><p>参考文档：<a href="http://es6.ruanyifeng.com/#docs/class-extends" target="_blank" rel="noopener">阮一峰 ECMAScript 6 入门</a></p><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorLine</span> <span class="keyword">extends</span> <span class="title">Line</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>子类必须在constructor方法中调用super方法<br>如果子类没有constructor方法，constructor会被默认添加<br>在constructor方法中，只有调用super方法后，才能使用this<br>可继承原生构造函数(String/Number/Boolean/Array/Date/Error/Regexp/Function/Object)</p><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf"></a>Object.getPrototypeOf</h3><p>判断一个类是否继承自另一个类<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(ColorLine) === Line <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><ul><li>每个对象都有一个名为<strong>proto</strong>的属性</li><li>每个构造函数都有一个名为prototype的方法</li><li>每个对象的<strong>proto</strong>指向自身构造函数的prototype<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(length) &#123;</span><br><span class="line"><span class="keyword">this</span>.length = length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> line = <span class="keyword">new</span> Line(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(line.__proto__ === Line.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(line.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(line.__proto__.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// null &lt;= Object &lt;= Line &lt;= line</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Line.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Line.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Line.__proto__.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// null &lt;= Object &lt;= Function &lt;= Line</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.__proto__);</span><br></pre></td></tr></table></figure></li></ul><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul><li>作为函数 <code>super()</code><br>只能在子类的constructor方法中调用<br>子类constructor方法中必须调用一次super方法</li><li>用作对象<br>普通方法中，指向父类的原型对象<br>静态方法中，指向父类</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ES6 · Class继承&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="es6-class" scheme="https://finchratel.github.io/tags/es6-class/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Class基础</title>
    <link href="https://finchratel.github.io/2018/11/30/es6-learn-004/"/>
    <id>https://finchratel.github.io/2018/11/30/es6-learn-004/</id>
    <published>2018-11-30T08:11:16.000Z</published>
    <updated>2018-12-03T03:13:07.920Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ES6 · Class基础</strong></p><a id="more"></a><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Rectangle (width, height) &#123;</span><br><span class="line">  this.width = width;</span><br><span class="line">  this.height = height;</span><br><span class="line">  this.area = this.width * this.height;</span><br><span class="line">&#125;</span><br><span class="line">Rectangle.prototype.getArea = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> this.width * this.height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const square = new Rectangle(4, 4);</span><br><span class="line">square.width //4</span><br><span class="line">square.height //4</span><br><span class="line">square.getArea() //16</span><br></pre></td></tr></table></figure><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Rectangle &#123;</span><br><span class="line">  constructor(width, height) &#123;</span><br><span class="line">    this.width = width;</span><br><span class="line">    this.height = height;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getArea</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this.width * this.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const square = new Rectangle(4, 4);</span><br><span class="line">square.width //4</span><br><span class="line">square.height //4</span><br><span class="line">square.getArea() //16</span><br></pre></td></tr></table></figure><ul><li><p><code>constructor</code><br>类的构造函数，实例化(new)时自动调用</p></li><li><p><code>static</code><br>静态方法，通过类调用，不会被实例继承，会被子类继承<br>this指向类，而不是实例</p></li><li><p><code>name</code><br>返回类的名称</p></li><li><p><code>new.target</code><br>返回实例化时调用的类<br>子类继承父类时，会返回子类</p></li></ul><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>类的所有方法都在原型上</li><li>类内部的方法，都是不可枚举的</li><li>类的属性名和方法名可以用表达式</li><li>类的内部默认启用严格模式</li><li>类不存在变量提升</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>实例的属性，除非定义在this对象上，否则都定义在原型上<br>类的所有实例共享一个原型对象</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ES6 · Class基础&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="es6-class" scheme="https://finchratel.github.io/tags/es6-class/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 小结03</title>
    <link href="https://finchratel.github.io/2018/11/29/vim-study-003/"/>
    <id>https://finchratel.github.io/2018/11/29/vim-study-003/</id>
    <published>2018-11-29T03:49:37.000Z</published>
    <updated>2018-11-29T03:55:24.416Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 小结03</strong></p><a id="more"></a><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul><li><code>expandtab</code> 是否将tab转化为空格</li><li><code>shfitwidth</code> &gt;&gt;或&lt;&lt;时缩进的列数</li><li><code>tabstop</code> 一个tab键所占的列数</li><li><code>softtabstop</code> tab实际占的列数</li><li><code>autoindent(ai)</code> 自动换行<figure class="highlight bash"><figcaption><span>.vimrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> softtabstop=4</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 小结03&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-study" scheme="https://finchratel.github.io/tags/vim-study/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 小结02</title>
    <link href="https://finchratel.github.io/2018/11/28/vim-study-002/"/>
    <id>https://finchratel.github.io/2018/11/28/vim-study-002/</id>
    <published>2018-11-28T05:57:43.000Z</published>
    <updated>2018-12-04T02:49:52.503Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 小结02</strong></p><a id="more"></a><h3 id="进入普通模式-Normal-mode"><a href="#进入普通模式-Normal-mode" class="headerlink" title="进入普通模式(Normal mode)"></a>进入普通模式(Normal mode)</h3><ul><li><code>Esc</code></li><li><code>CTRL + [</code></li></ul><h3 id="进入命令模式-Commant-line-mode"><a href="#进入命令模式-Commant-line-mode" class="headerlink" title="进入命令模式(Commant line mode)"></a>进入命令模式(Commant line mode)</h3><ul><li><code>:</code></li></ul><h3 id="进入插入模式-Insert-mode"><a href="#进入插入模式-Insert-mode" class="headerlink" title="进入插入模式(Insert mode)"></a>进入插入模式(Insert mode)</h3><ul><li><code>i</code></li><li><code>I</code></li><li><code>a</code></li><li><code>A</code></li><li><code>o</code></li><li><code>O</code></li></ul><h3 id="进入可视模式-Visual-mode"><a href="#进入可视模式-Visual-mode" class="headerlink" title="进入可视模式(Visual mode)"></a>进入可视模式(Visual mode)</h3><ul><li><code>v</code></li></ul><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><ul><li><code>q</code></li><li><code>ZZ</code></li></ul><h3 id="常用命令一览"><a href="#常用命令一览" class="headerlink" title="常用命令一览"></a>常用命令一览</h3><table><thead><tr><th>模式</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>正常模式</td><td><code>b</code></td><td>跳转到前一个单词的开头</td></tr><tr><td>正常模式</td><td><code>ge</code></td><td>跳转到前一个单词的结尾</td></tr><tr><td>正常模式</td><td><code>f&lt;字母&gt;</code></td><td>向后搜索字母，并跳转到第一个匹配的位置</td></tr><tr><td>正常模式</td><td><code>F&lt;字母&gt;</code></td><td>向前搜索字母，并跳转到第一个匹配的位置</td></tr></tbody></table><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><ul><li><code>yy</code></li><li><code>y0</code></li><li><code>y^</code></li><li><code>y$</code></li><li><code>yw</code></li><li><code>yG</code></li><li><code>y1G</code></li></ul><h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><ul><li><code>p</code></li><li><code>P</code></li></ul><h3 id="上下行交换"><a href="#上下行交换" class="headerlink" title="上下行交换"></a>上下行交换</h3><ul><li><code>ddp</code></li></ul><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><ul><li><code>r</code> 替换当前光标位置</li><li><code>R</code> 连续替换</li><li><code>cc</code> 替换当前行</li><li><code>cw</code> 替换一个单词</li><li><code>C</code> 替换到行尾</li><li><code>~</code> 反转大小写</li><li><code>u</code> 撤销一次</li><li><code>U</code> 撤销当前行的所有更改</li><li><code>Ctrl + r</code> 取消撤销</li></ul><h3 id="文本位置"><a href="#文本位置" class="headerlink" title="文本位置"></a>文本位置</h3><ul><li><code>ce</code> 居中</li><li><code>ri</code> 居右</li><li><code>le</code> 居左</li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li><code>?&lt;单词&gt;</code> 向上查找word</li><li><code>/&lt;单词&gt;</code> 向下查找word</li><li><code>n</code> 下一个</li><li><code>N</code> 上一个</li><li><code>\*</code> 向下查找光标所在单词</li><li><code>\#</code> 向上查找鼠标所在单词</li></ul><h3 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h3><ul><li><code>vim 1.txt 2.txt</code> 同时打开两个文件</li><li><code>:n</code> 编辑下一个文件</li><li><code>:N</code> 编辑上一个文件</li><li><code>:e 3.txt</code> 打开3.txt</li><li><code>:e#</code> 回到前一个文件</li><li><code>:ls</code> 列出已打开的文件</li><li><code>:b 2.txt</code> 编辑2.txt</li><li><code>:bd 2.txt</code> 删除已打开的文件列表中的2.txt</li><li><code>e! 4.txt</code> 强制打开4.txt</li><li><code>:f</code> 显示正在编辑的文件名</li><li><code>:f 5.txt</code> 另存为5.txt</li></ul><h3 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h3><ul><li><code>vim -r filename</code></li></ul><h3 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h3><ul><li><code>v</code> 字符选择</li><li><code>Shift + v</code> 行选择</li><li><code>Ctrl + v</code> 区域选择</li></ul><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul><li><code>&gt;&gt;</code> 向右缩进</li><li><code>&lt;&lt;</code> 向左缩进</li></ul><h3 id="视窗操作"><a href="#视窗操作" class="headerlink" title="视窗操作"></a>视窗操作</h3><ul><li><code>:new</code> 水平分屏</li><li><code>:sp</code> 水平分屏</li><li><code>:vsp</code> 垂直分屏</li><li><code>Ctrl + w s</code> 水平分屏</li><li><code>Ctrl + w v</code> 垂直分屏</li><li><code>Ctrl + w q</code> 关闭当前分屏</li><li><code>Ctrl + w o</code> 打开新视窗，并隐藏之前的所有视窗</li><li><code>Ctrl + w h</code> 切换到左侧分屏</li><li><code>Ctrl + w j</code> 切换到下面分屏</li><li><code>Ctrl + w k</code> 切换到上面分屏</li><li><code>Ctrl + w l</code> 切换到下册分屏</li><li><code>Ctrl + w H</code> 移动视窗到左侧</li><li><code>Ctrl + w J</code> 移动视窗值下面</li><li><code>Ctrl + w K</code> 移动视窗至上面</li><li><code>Ctrl + w L</code> 移动视窗至右侧</li><li><code>Ctrl + w -</code> 减小视窗高度</li><li><code>Ctrl + w +</code> 增加视窗高度</li></ul><h3 id="文档加密"><a href="#文档加密" class="headerlink" title="文档加密"></a>文档加密</h3><ul><li><code>vim -x file</code></li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ul><li><code>:set</code> 显示所有修改过的配置</li><li><code>:set all</code> 显示所有的设定值</li><li><code>:set option?</code> 显示option的设定值</li><li><code>:set nooption</code> 取消当前设定值</li><li><code>:set autoindent(ai)</code> 设置自动缩进</li><li><code>:set autowrite(aw)</code> 设置自动保存，默认未打开</li><li><code>:set background=dark</code> 设置背景风格</li><li><code>:set backup(bk)</code> 设置自动备份，默认未打开</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 小结02&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-study" scheme="https://finchratel.github.io/tags/vim-study/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Module</title>
    <link href="https://finchratel.github.io/2018/11/26/es6-learn-003/"/>
    <id>https://finchratel.github.io/2018/11/26/es6-learn-003/</id>
    <published>2018-11-26T07:36:00.000Z</published>
    <updated>2018-11-27T08:21:23.680Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ES6 · Module</strong></p><a id="more"></a><p>CommonJS</p><ul><li>运行时加载，在运行到的时候才能确定依赖关系，输出的是值的缓存，不能动态更新</li></ul><p>ES6</p><ul><li>编译时加载，编译时即可确定依赖关系，效率更高，输出的是值的引用，可以做静态优化，输出会动态更新</li></ul><p>ES6模块自动启用严格模式，严格模式下：</p><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用with语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量delete prop，会报错，只能删除属性delete global[prop]</li><li>eval不会在它的外层作用域引入变量</li><li>eval和arguments不能被重新赋值</li><li>arguments不会自动反映函数参数的变化</li><li>不能使用arguments.callee</li><li>不能使用arguments.caller</li><li>禁止this指向全局对象，顶层的this指向undefined</li><li>不能使用fn.caller和fn.arguments获取函数调用的堆栈</li><li>增加了保留字（比如protected、static和interface）</li></ul><blockquote><p>export命令用于规定模块的对外接口<br>import命令用于输入其他模块提供的功能<br>as 重命名<br>default 指定默认输出<br>* 代表模块所有内容</p></blockquote><hr><p><strong>一般用法</strong><br><figure class="highlight js"><figcaption><span>module.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'module'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>使用default指定默认输出</strong><br><figure class="highlight js"><figcaption><span>module.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'module'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> name;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">'./module'</span>; <span class="comment">// name可以是任何合法变量名</span></span><br></pre></td></tr></table></figure><hr><p><strong>使用 * 整体加载，使用as改名</strong><br><figure class="highlight js"><figcaption><span>module.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'module'</span>;</span><br><span class="line"><span class="keyword">let</span> version = <span class="string">'1.0.0'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name, version &#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>模块继承</strong><br><figure class="highlight js"><figcaption><span>utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'utils'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;name&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><figcaption><span>tools.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./utils'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> version = <span class="string">'1.0.0'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> tools <span class="keyword">from</span> <span class="string">'./tools'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(tools.name, tools.version);</span><br><span class="line"><span class="comment">// utils 1.0.0</span></span><br></pre></td></tr></table></figure><hr><p><strong>浏览器加载ES6模块</strong><br><code>&lt;script&gt;</code>标签加入<code>type=&quot;module&quot;</code>属性表示是ES6模块<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/myModule.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/myModule.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th>属性</th><th>加载方式</th><th>执行时间</th></tr></thead><tbody><tr><td>defer</td><td>异步加载</td><td>渲染完再执行</td></tr><tr><td>async</td><td>异步加载</td><td>下载完就执行</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./foo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等同于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./foo.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ES6 · Module&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="es6-module" scheme="https://finchratel.github.io/tags/es6-module/"/>
    
  </entry>
  
  <entry>
    <title>SFTP · 简易教程及示例</title>
    <link href="https://finchratel.github.io/2018/11/23/linux-learn-002/"/>
    <id>https://finchratel.github.io/2018/11/23/linux-learn-002/</id>
    <published>2018-11-23T09:54:26.000Z</published>
    <updated>2018-11-27T08:28:43.965Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SFTP · 简易教程及示例</strong></p><a id="more"></a><ul><li><p>sftp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sftp</span></span><br><span class="line">usage: sftp [-1246aCfpqrv] [-B buffer_size] [-b batchfile] [-c cipher]</span><br><span class="line">          [-D sftp_server_path] [-F ssh_config] [-i identity_file] [-l <span class="built_in">limit</span>]</span><br><span class="line">          [-o ssh_option] [-P port] [-R num_requests] [-S program]</span><br><span class="line">          [-s subsystem | sftp_server] host</span><br><span class="line">       sftp [user@]host[:file ...]</span><br><span class="line">       sftp [user@]host[:dir[/]]</span><br><span class="line">       sftp -b batchfile [user@]host</span><br></pre></td></tr></table></figure></li><li><p>连接sftp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sftp root@host</span></span><br><span class="line">The authenticity of host <span class="string">'host (192.168.16.128)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:t5KwBH+CBk7Emp24FI73Jr4IzVkD9VEUG9XIu86CvsE.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:3c:31:c4:06:8a:6a:a6:4d:9a:21:58:c0:bc:e1:eb:de.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>host,192.168.16.128<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@host'</span>s password: </span><br><span class="line">Connected to host.</span><br><span class="line">sftp&gt;</span><br></pre></td></tr></table></figure></li><li><p>help</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">sftp&gt; <span class="built_in">help</span></span><br><span class="line">Available commands:</span><br><span class="line"><span class="built_in">bye</span>                                Quit sftp</span><br><span class="line"><span class="built_in">cd</span> path                            Change remote directory to <span class="string">'path'</span></span><br><span class="line">chgrp grp path                     Change group of file <span class="string">'path'</span> to <span class="string">'grp'</span></span><br><span class="line">chmod mode path                    Change permissions of file <span class="string">'path'</span> to <span class="string">'mode'</span></span><br><span class="line">chown own path                     Change owner of file <span class="string">'path'</span> to <span class="string">'own'</span></span><br><span class="line">df [-hi] [path]                    Display statistics <span class="keyword">for</span> current directory or</span><br><span class="line">                                   filesystem containing <span class="string">'path'</span></span><br><span class="line"><span class="built_in">exit</span>                               Quit sftp</span><br><span class="line">get [-afPpRr] remote [<span class="built_in">local</span>]       Download file</span><br><span class="line">reget [-fPpRr] remote [<span class="built_in">local</span>]      Resume download file</span><br><span class="line">reput [-fPpRr] [<span class="built_in">local</span>] remote      Resume upload file</span><br><span class="line"><span class="built_in">help</span>                               Display this <span class="built_in">help</span> text</span><br><span class="line">lcd path                           Change <span class="built_in">local</span> directory to <span class="string">'path'</span></span><br><span class="line">lls [ls-options [path]]            Display <span class="built_in">local</span> directory listing</span><br><span class="line">lmkdir path                        Create <span class="built_in">local</span> directory</span><br><span class="line">ln [-s] oldpath newpath            Link remote file (-s <span class="keyword">for</span> symlink)</span><br><span class="line">lpwd                               Print <span class="built_in">local</span> working directory</span><br><span class="line">ls [-1afhlnrSt] [path]             Display remote directory listing</span><br><span class="line">lumask <span class="built_in">umask</span>                       Set <span class="built_in">local</span> <span class="built_in">umask</span> to <span class="string">'umask'</span></span><br><span class="line">mkdir path                         Create remote directory</span><br><span class="line">progress                           Toggle display of progress meter</span><br><span class="line">put [-afPpRr] <span class="built_in">local</span> [remote]       Upload file</span><br><span class="line"><span class="built_in">pwd</span>                                Display remote working directory</span><br><span class="line">quit                               Quit sftp</span><br><span class="line">rename oldpath newpath             Rename remote file</span><br><span class="line">rm path                            Delete remote file</span><br><span class="line">rmdir path                         Remove remote directory</span><br><span class="line">symlink oldpath newpath            Symlink remote file</span><br><span class="line">version                            Show SFTP version</span><br><span class="line">!<span class="built_in">command</span>                           Execute <span class="string">'command'</span> <span class="keyword">in</span> <span class="built_in">local</span> shell</span><br><span class="line">!                                  Escape to <span class="built_in">local</span> shell</span><br><span class="line">?    Synonym <span class="keyword">for</span> <span class="built_in">help</span></span><br></pre></td></tr></table></figure></li><li><p>常用命令一览  </p></li></ul><blockquote><blockquote><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>bye</code></td><td>退出</td></tr><tr><td><code>quit</code></td><td>退出</td></tr><tr><td><code>cd path</code></td><td>切换远程目录</td></tr><tr><td><code>lcd path</code></td><td>切换本地目录</td></tr><tr><td><code>pwd</code></td><td>展示远程当前路径</td></tr><tr><td><code>lpwd</code></td><td>展示本地当前路径</td></tr><tr><td><code>ls</code></td><td>列出远程目录信息</td></tr><tr><td><code>lls</code></td><td>列出本地目录信息</td></tr><tr><td><code>mkdir</code></td><td>创建远程目录</td></tr><tr><td><code>lmkdir</code></td><td>创建本地目录</td></tr><tr><td><code>progress</code></td><td>是否展示进度</td></tr><tr><td><code>put</code></td><td>上传</td></tr><tr><td><code>get</code></td><td>下载</td></tr><tr><td><code>df</code></td><td>查看磁盘信息</td></tr><tr><td><code>!command</code></td><td>在本地shell执行命令</td></tr><tr><td><code>!</code></td><td>退出到本地shell</td></tr><tr><td><code>help</code></td><td>查看帮助信息</td></tr><tr><td><code>?</code></td><td>查看帮助信息</td></tr></tbody></table></blockquote></blockquote><ul><li>上传下载示例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sftp&gt; <span class="built_in">pwd</span></span><br><span class="line">Remote working directory: /root</span><br><span class="line">sftp&gt; lpwd</span><br><span class="line">Local working directory: /c/Users/zhanghao30/Desktop/temp</span><br><span class="line">sftp&gt; ls</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">sftp&gt; lls</span><br><span class="line">note.txt</span><br><span class="line">sftp&gt; put note.txt</span><br><span class="line">Uploading note.txt to /root/note.txt</span><br><span class="line">note.txt                    100% 1781   175.3KB/s   00:00</span><br><span class="line">sftp&gt; get anaconda-ks.cfg</span><br><span class="line">Fetching /root/anaconda-ks.cfg to anaconda-ks.cfg</span><br><span class="line">/root/anaconda-ks.cfg       100% 1421   157.1KB/s   00:00</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;SFTP · 简易教程及示例&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://finchratel.github.io/categories/linux/"/>
    
    
      <category term="sftp" scheme="https://finchratel.github.io/tags/sftp/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 小结01</title>
    <link href="https://finchratel.github.io/2018/11/23/vim-study-001/"/>
    <id>https://finchratel.github.io/2018/11/23/vim-study-001/</id>
    <published>2018-11-23T02:10:06.000Z</published>
    <updated>2018-11-27T08:25:30.177Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 小结01</strong></p><a id="more"></a><table><thead><tr><th>操作</th><th>模式</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>打开</td><td>命令行</td><td><code>vim</code></td><td>打开VIM</td></tr><tr><td>打开</td><td>命令行</td><td><code>vim [path/to/file]</code></td><td>打开file文件，若不存在，则新建file并打开</td></tr><tr><td>打开</td><td>VIM正常模式</td><td><code>:e [path/to/file]</code></td><td>打开file文件，若不存在，则新建file并打开</td></tr><tr><td>保存</td><td>VIM正常模式</td><td><code>:w</code></td><td>保存</td></tr><tr><td>保存</td><td>VIM正常模式</td><td><code>:w!</code></td><td>强制保存</td></tr><tr><td>保存</td><td>VIM正常模式</td><td><code>:w [path/to/file]</code></td><td>保存到file中</td></tr><tr><td>保存</td><td>VIM正常模式</td><td><code>:w! [path/to/file]</code></td><td>强制保存到file中</td></tr><tr><td>保存</td><td>VIM正常模式</td><td><code>:sav [path/to/file]</code></td><td>另存为file</td></tr><tr><td>退出</td><td>VIM正常模式</td><td><code>:q</code></td><td>退出</td></tr><tr><td>退出</td><td>VIM正常模式</td><td><code>:q!</code></td><td>强制退出</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 小结01&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-study" scheme="https://finchratel.github.io/tags/vim-study/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 基础06</title>
    <link href="https://finchratel.github.io/2018/11/21/vim-learn-006/"/>
    <id>https://finchratel.github.io/2018/11/21/vim-learn-006/</id>
    <published>2018-11-21T07:07:15.000Z</published>
    <updated>2018-11-28T03:33:10.296Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 基础06</strong></p><a id="more"></a><ul><li><p>进入插入模式 在光标前插入<br><code>i</code></p></li><li><p>进入插入模式 在光标所在行首插入<br><code>I</code></p></li><li><p>进入插入模式 在光标后插入<br><code>a</code></p></li><li><p>进入插入模式 在光标所在行尾插入<br><code>A</code></p></li><li><p>在光标下方新建一行，并进入插入模式<br><code>o</code></p></li><li><p>在光标上方新建一行，并进入插入模式<br><code>O</code></p></li><li><p>替换模式 连续替换<br><code>R</code></p></li><li><p>复制<br><code>y</code></p></li><li><p>粘贴<br><code>p</code></p></li><li><p>复制粘贴</p><ul><li><code>v</code> 进入可视模式</li><li>移动光标，选择文本</li><li><code>y</code> 复制</li><li><code>p</code> 粘贴</li></ul></li><li><p>窗口切换<br><code>CTRL + W; CTRL + W</code></p></li><li><p>自动补全<br><code>CTRL + D</code><br><code>TAB</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 基础06&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-tutor" scheme="https://finchratel.github.io/tags/vim-tutor/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 基础05</title>
    <link href="https://finchratel.github.io/2018/11/21/vim-learn-005/"/>
    <id>https://finchratel.github.io/2018/11/21/vim-learn-005/</id>
    <published>2018-11-21T06:26:06.000Z</published>
    <updated>2018-11-21T08:57:41.537Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 基础05</strong></p><a id="more"></a><ul><li><p>执行外部命令<br><code>:!ls</code></p></li><li><p>保存到文件中<br><code>:w [filename]</code></p></li><li><p>选择性保存</p><ul><li><code>v</code> 进入可视模式</li><li>选择文本</li><li><code>:w</code> 保存</li></ul></li><li><p>提取内容<br><code>:r [filename]</code><br><code>:r !tree</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 基础05&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-tutor" scheme="https://finchratel.github.io/tags/vim-tutor/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 基础04</title>
    <link href="https://finchratel.github.io/2018/11/20/vim-learn-004/"/>
    <id>https://finchratel.github.io/2018/11/20/vim-learn-004/</id>
    <published>2018-11-20T08:53:44.000Z</published>
    <updated>2018-11-21T08:58:21.022Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 基础04</strong></p><a id="more"></a><ul><li><p>显示光标位置和文件状态<br><code>CTRL + g</code></p></li><li><p>跳转 到最后一行<br><code>G</code></p></li><li><p>跳转 到第一行<br><code>gg</code></p></li><li><p>跳转 到指定行<br><code>[number] G</code></p></li><li><p>向下查找<br><code>/word</code></p></li><li><p>向上查找<br><code>?word</code></p></li><li><p>查找下一个<br><code>n</code></p></li><li><p>查找上一个<br><code>N</code></p></li><li><p>回到上一个匹配项<br><code>CTRL + o</code></p></li><li><p>回到下一个匹配项<br><code>CTRL + i</code></p></li><li><p>查找匹配的括号 () [] {}<br><code>%</code></p></li><li><p>替换 光标所在行第一个匹配项<br><code>:s/old/new</code></p></li><li><p>替换 光标所在行所有匹配项<br><code>:s/old/new/g</code></p></li><li><p>替换 指定行的匹配项<br><code>:#,#s/old/new/g</code>  #,#分别代表起始行和结束行</p></li><li><p>替换 文件中所有匹配项<br><code>:%s/old/new/g</code></p></li><li><p>替换 替换时询问<br><code>:s/old/new/gc</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 基础04&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-tutor" scheme="https://finchratel.github.io/tags/vim-tutor/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 基础03</title>
    <link href="https://finchratel.github.io/2018/11/19/vim-learn-003/"/>
    <id>https://finchratel.github.io/2018/11/19/vim-learn-003/</id>
    <published>2018-11-19T09:47:33.000Z</published>
    <updated>2018-11-21T08:58:27.762Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 基础03</strong></p><a id="more"></a><ul><li><p>粘贴 寄存器内的文本<br><code>p</code></p></li><li><p>替换 光标所在位置的一个字符<br><code>r</code></p></li><li><p>更改<br><code>c [number] motion</code></p></li><li><p>更改 从光标到词尾<br><code>ce</code></p></li><li><p>更改 从光标到下一个单词的起始<br><code>cw</code></p></li><li><p>更改 从光标到行尾<br><code>c$</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 基础03&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-tutor" scheme="https://finchratel.github.io/tags/vim-tutor/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 基础02</title>
    <link href="https://finchratel.github.io/2018/11/16/vim-learn-002/"/>
    <id>https://finchratel.github.io/2018/11/16/vim-learn-002/</id>
    <published>2018-11-16T06:56:24.000Z</published>
    <updated>2018-11-28T03:41:13.750Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 基础02</strong></p><a id="more"></a><ul><li><p>删除（光标所在字符）<br><code>x</code></p></li><li><p>删除（光标所在前一个字符）<br><code>X</code></p></li><li><p>删除<br><code>d [number] motion</code></p></li><li><p>删除 从光标到单词的末尾<br><code>de</code></p></li><li><p>删除 从光标到下一个单词的开始<br><code>dw</code></p></li><li><p>删除 从光标到行尾<br><code>d$</code><br><code>D</code></p></li><li><p>删除 从光标到行首<br><code>d^</code></p></li><li><p>删除 整行<br><code>dd</code></p></li><li><p>删除 从当前行到文档结尾处<br><code>dG</code></p></li><li><p>删除 从当前行到文档开始处<br><code>d1G</code></p></li><li><p>光标移动到下一个单词的开头<br><code>w</code></p></li><li><p>光标移动到单词的末尾，如果已经在单词的末尾或空格处，则移动到下一个单词的末尾。<br><code>e</code></p></li><li><p>光标移动到行首<br><code>0</code><br><code>^</code></p></li><li><p>光标移动到行尾<br><code>$</code></p></li><li><p>撤销一步<br><code>u</code></p></li><li><p>撤销一行<br><code>U</code></p></li><li><p>取消撤销<br><code>CTRL + R</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 基础02&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-tutor" scheme="https://finchratel.github.io/tags/vim-tutor/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 基础01</title>
    <link href="https://finchratel.github.io/2018/11/16/vim-learn-001/"/>
    <id>https://finchratel.github.io/2018/11/16/vim-learn-001/</id>
    <published>2018-11-16T06:02:35.000Z</published>
    <updated>2018-11-28T11:27:30.691Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 基础01</strong></p><a id="more"></a><ul><li><p>移动光标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    k上</span><br><span class="line">h左     l右</span><br><span class="line">    j下</span><br></pre></td></tr></table></figure></li><li><p>打开/创建<br><code>vim filename</code><br><code>:e path/to/file</code></p></li><li><p>退出（不保存）<br><code>q</code></p></li><li><p>强制退出（不保存）<br><code>q!</code></p></li><li><p>保存<br><code>w</code></p></li><li><p>保存并退出<br><code>wq</code></p></li><li><p>强制保存并退出<br><code>wq!</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 基础01&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-tutor" scheme="https://finchratel.github.io/tags/vim-tutor/"/>
    
  </entry>
  
  <entry>
    <title>Git · 简易教程</title>
    <link href="https://finchratel.github.io/2018/11/15/git-learn-001/"/>
    <id>https://finchratel.github.io/2018/11/15/git-learn-001/</id>
    <published>2018-11-15T08:58:33.000Z</published>
    <updated>2018-11-27T09:43:05.380Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1. clone</strong><br><strong>2. branch</strong><br><strong>3. checkout</strong><br><strong>4. status</strong><br><strong>5. add</strong><br><strong>6. commit</strong><br><strong>7. push</strong><br><strong>8. 示例</strong></p><a id="more"></a><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><ul><li>克隆远程仓库到本地<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> ssh://git@git.moyuqingpen.com.cn:7999/~zhanghao30/playground.git</span><br><span class="line">Cloning into <span class="string">'playground'</span>...</span><br><span class="line">remote: 对象计数中: 155, 完成.</span><br><span class="line">remote: 压缩对象中: 100% (133/133), 完成.</span><br><span class="line">remote: Total 155 (delta 52), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (155/155), 392.57 KiB | 1.86 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (52/52), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure></li></ul><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><ul><li><p>查看分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure></li><li><p>创建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch develop</span><br></pre></td></tr></table></figure></li></ul><h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><ul><li>检出分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><ul><li>显示工作目录和暂存区状态<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch develop</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        readme.md</span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure></li></ul><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><ul><li>添加到暂存区<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> readme.md.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br></pre></td></tr></table></figure></li></ul><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><ul><li>提交变动<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git commit . -m <span class="string">"add readme"</span></span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> readme.md.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">[develop dbe505a] add readme</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 readme.md</span><br></pre></td></tr></table></figure></li></ul><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><ul><li>推送到远程分支<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line">Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 271 bytes | 271.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote:</span><br><span class="line">remote: Create pull request <span class="keyword">for</span> develop:</span><br><span class="line">remote:   https://git.moyuqingpen.com.cn/users/zhanghao30/repos/playground/compare/commits?sourceBranch=refs/heads/develop</span><br><span class="line">remote:</span><br><span class="line">To ssh://git.moyuqingpen.com.cn:7999/~zhanghao30/playground.git</span><br><span class="line">   dbe505a..dcf6cc8  develop -&gt; develop</span><br></pre></td></tr></table></figure></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>克隆-修改-提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">$ git <span class="built_in">clone</span> ssh://git.moyuqingpen.com.cn:7999/~zhanghao30/playground.git</span><br><span class="line"><span class="comment"># do some change here ...</span></span><br><span class="line"><span class="comment"># 添加到索引</span></span><br><span class="line">$ git add .</span><br><span class="line"><span class="comment"># 记录变动</span></span><br><span class="line">$ git commit . -m <span class="string">"tips"</span></span><br><span class="line"><span class="comment"># 推送到远程分支</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure></li><li><p>新建本地develop分支，并提交到远程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git branch develop</span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream-to=/origin/develop</span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment"># do some change here</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit . -m <span class="string">"tips"</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure></li><li><p>删除远程develop分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git branch -d -r origin/develop</span><br></pre></td></tr></table></figure></li></ul><p>注：以上只是 <code>git</code> 命令行的简单教程，具体的用法请参考 <code>git &lt;command&gt; --help</code>，或<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">git book</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1. clone&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2. branch&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3. checkout&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;4. status&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;5. add&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;6. commit&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;7. push&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;8. 示例&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://finchratel.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://finchratel.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>博客计划 · 2018年</title>
    <link href="https://finchratel.github.io/2018/11/13/plan-blog-0811/"/>
    <id>https://finchratel.github.io/2018/11/13/plan-blog-0811/</id>
    <published>2018-11-13T03:36:12.000Z</published>
    <updated>2018-12-04T06:52:26.732Z</updated>
    
    <content type="html"><![CDATA[<p><strong>博客计划 · 2018年</strong></p><a id="more"></a><ul><li style="list-style: none"><input type="checkbox" checked> <code>git</code> 命令行简易教程</li><li style="list-style: none"><input type="checkbox"> <code>eslint</code></li><li style="list-style: none"><input type="checkbox"> <code>es6 Proxy</code></li><li style="list-style: none"><input type="checkbox" checked> <code>es6 Reflect</code></li><li style="list-style: none"><input type="checkbox" checked> <code>es6 Module</code></li><li style="list-style: none"><input type="checkbox" checked> <code>es6 Class</code></li><li style="list-style: none"><input type="checkbox"> 基于 <code>nodejs</code> 的爬虫</li><li style="list-style: none"><input type="checkbox"> <code>css flex</code></li><li style="list-style: none"><input type="checkbox" checked> <code>vim</code></li><li style="list-style: none"><input type="checkbox"> <code>vim plugin</code></li><li style="list-style: none"><input type="checkbox" checked> <code>sftp</code></li><li style="list-style: none"><input type="checkbox"> <code>webpack</code></li><li style="list-style: none"><input type="checkbox"> <code>nginx</code></li><li style="list-style: none"><input type="checkbox"> <code>shell</code>编程</li><li style="list-style: none"><input type="checkbox"> <code>python</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;博客计划 · 2018年&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="plan" scheme="https://finchratel.github.io/categories/plan/"/>
    
    
      <category term="plan-blog" scheme="https://finchratel.github.io/tags/plan-blog/"/>
    
  </entry>
  
  <entry>
    <title>Vue · 生命周期</title>
    <link href="https://finchratel.github.io/2018/11/09/vue-learn-001/"/>
    <id>https://finchratel.github.io/2018/11/09/vue-learn-001/</id>
    <published>2018-11-09T08:58:26.000Z</published>
    <updated>2018-11-12T12:01:43.471Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1. beforeCreate</strong><br><strong>2. created</strong><br><strong>3. beforeMount</strong><br><strong>4. mounted</strong><br><strong>5. beforeUpdate</strong><br><strong>6. updated</strong><br><strong>7. beforeDestroy</strong><br><strong>8. destroyed</strong><br><strong>9. 示例</strong></p><a id="more"></a><blockquote><p>Vue生命周期图示</p></blockquote><p><img src="/images/vue-lifeCircle.png" alt="vue-lifeCircle"></p><h3 id="1-beforeCreate"><a href="#1-beforeCreate" class="headerlink" title="1. beforeCreate"></a>1. beforeCreate</h3><blockquote><p>在实例初始化之后，数据观测(data observer)和event/watcher事件配置之前被调用</p></blockquote><h3 id="2-created"><a href="#2-created" class="headerlink" title="2. created"></a>2. created</h3><blockquote><p>在实例创建完成之后被立即调用<br>在这一步，已完成一下的配置：<br>  数据观测(data observer)<br>  属性和方法的运算<br>  watch/event事件回调<br>挂载阶段还未开始，$el属性目前不可用</p></blockquote><h3 id="3-beforeMount"><a href="#3-beforeMount" class="headerlink" title="3. beforeMount"></a>3. beforeMount</h3><blockquote><p>在挂载开始之前被调用<br>该钩子在服务端渲染期间不被调用</p></blockquote><h3 id="4-mounted"><a href="#4-mounted" class="headerlink" title="4. mounted"></a>4. mounted</h3><blockquote><p>el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子<br>mounted时，子组件未必已经被挂载<br>若需要整个视图渲染完毕再执行，需要用vm.$nextTick()<br>该钩子在服务端渲染期间不被调用</p></blockquote><h3 id="5-beforeUpdate"><a href="#5-beforeUpdate" class="headerlink" title="5. beforeUpdate"></a>5. beforeUpdate</h3><blockquote><p>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。<br>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</p></blockquote><h3 id="6-updated"><a href="#6-updated" class="headerlink" title="6. updated"></a>6. updated</h3><blockquote><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子<br>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。<br>注意 updated 不会承诺所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以用 vm.$nextTick<br>该钩子在服务器端渲染期间不被调用。</p></blockquote><h3 id="7-beforeDestroy"><a href="#7-beforeDestroy" class="headerlink" title="7. beforeDestroy"></a>7. beforeDestroy</h3><blockquote><p>实例销毁之前调用。在这一步，实例仍然完全可用。<br>该钩子在服务器端渲染期间不被调用。</p></blockquote><h3 id="8-destroyed"><a href="#8-destroyed" class="headerlink" title="8. destroyed"></a>8. destroyed</h3><blockquote><p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<br>该钩子在服务器端渲染期间不被调用。</p></blockquote><h3 id="9-示例"><a href="#9-示例" class="headerlink" title="9. 示例"></a>9. 示例</h3><figure class="highlight plain"><figcaption><span>app.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;hello, vue.&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      time: new Date().getTime()</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&apos;beforeCreate&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&apos;created&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&apos;beforeMount&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&apos;mounted&apos;, new Date().getTime() - this.time);</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      this.$forceUpdate();</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      this.$destroy();</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&apos;beforeUpdate&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&apos;updated&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    console.log(&apos;beforeDestroyed&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&apos;destroyed&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>输出结果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate NaN <span class="comment"># 这里输出NaN是因为beforeCreate时，this.time取不到值</span></span><br><span class="line">created 0</span><br><span class="line">beforeMount 0</span><br><span class="line">mounted 3</span><br><span class="line">beforeUpdate 1005</span><br><span class="line">updated 1006</span><br><span class="line">beforeDestroyed 2004</span><br><span class="line">destroyed 2005</span><br></pre></td></tr></table></figure><p>参考文档：<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">Vue 官网 API</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1. beforeCreate&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2. created&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3. beforeMount&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;4. mounted&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;5. beforeUpdate&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;6. updated&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;7. beforeDestroy&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;8. destroyed&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;9. 示例&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="https://finchratel.github.io/categories/vue/"/>
    
    
      <category term="vue-lifeCircle" scheme="https://finchratel.github.io/tags/vue-lifeCircle/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · async/await</title>
    <link href="https://finchratel.github.io/2018/11/09/es6-learn-002/"/>
    <id>https://finchratel.github.io/2018/11/09/es6-learn-002/</id>
    <published>2018-11-09T02:30:18.000Z</published>
    <updated>2018-11-13T03:36:59.319Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>async</code> 是 <code>Generator</code> 函数的语法糖，用于异步编程<br><code>async</code> 返回 <code>Promise</code> 对象，可以链式添加回调函数<br><code>await</code> 代表后面跟着的可能是异步操作，要等待异步操作结束，再接着执行如果不是异步操作，会立即返回对应值</p></blockquote><a id="more"></a><p>例如：现在有一个商品的 <code>goodsId</code>，要获取商品对应店铺的所有宝贝。</p><ul><li>1.先通过 <code>goodsId</code> 查询 <code>shopId</code></li><li>2.然后通过 <code>shopId</code> 查询 <code>GoodsList</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getGoodsList</span>(<span class="params">goodsId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> shopId = <span class="keyword">await</span> getShopIdByGoodsId(goodsId)</span><br><span class="line">  <span class="keyword">const</span> goodsList = <span class="keyword">await</span> getAllGoodsByShopId(shopId)</span><br><span class="line">  <span class="keyword">return</span> goodsList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>async</code> 函数 <code>return</code> 返回的值，将会是第一个回调函数的参数</p></blockquote><p>例如：获取店铺的所有宝贝之后，按照价格进行排序<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getGoodsList()</span><br><span class="line">  .then(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">    sortByPrice(list)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p><code>async</code> 函数内部出错时，如果内部异步方法没有错误处理，则 <code>Promise</code> 的状态会变为 <code>rejected</code>，该错误会被第一个 <code>catch</code> 回调函数接收。</p></blockquote><p>例如：获取 <code>shopId</code> 出错了，如果 <code>getShopIdByGoodsId</code> 内部有部署 <code>catch</code> 方法，错误会被自己捕获，如果没有部署，错误会被 <code>async</code> 的回调捕获。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getGoodsList()</span><br><span class="line">  .then(f1)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; 是 &lt;code&gt;Generator&lt;/code&gt; 函数的语法糖，用于异步编程&lt;br&gt;&lt;code&gt;async&lt;/code&gt; 返回 &lt;code&gt;Promise&lt;/code&gt; 对象，可以链式添加回调函数&lt;br&gt;&lt;code&gt;await&lt;/code&gt; 代表后面跟着的可能是异步操作，要等待异步操作结束，再接着执行如果不是异步操作，会立即返回对应值&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="es6-async" scheme="https://finchratel.github.io/tags/es6-async/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Promise</title>
    <link href="https://finchratel.github.io/2018/11/07/es6-learn-001/"/>
    <id>https://finchratel.github.io/2018/11/07/es6-learn-001/</id>
    <published>2018-11-07T10:17:47.000Z</published>
    <updated>2018-11-27T03:02:21.104Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1. 理解Promise</strong><br><strong>2. new Promise()</strong><br><strong>3. Promise.resolve()</strong><br><strong>4. Promise.reject()</strong><br><strong>5. Promise.prototype.then()</strong><br><strong>6. Promise.prototype.catch()</strong><br><strong>7. Promise.prototype.finally()</strong><br><strong>8. Promise.prototype.done()</strong><br><strong>9. Promise.all()</strong><br><strong>10. Promise.race()</strong></p><a id="more"></a><blockquote><p>异步编程的传统解决方案是回调函数和事件，在复杂的逻辑中，很容易出现多层回调函数嵌套(<code>Callback Hell</code>)<br>Promise 是一种新的解决方案，帮助开发者摆脱多层回调函数嵌套问题</p></blockquote><h3 id="理解Promise"><a href="#理解Promise" class="headerlink" title="理解Promise"></a>理解Promise</h3><p>Promise即承诺，即答应未来会做某件事。在未来某个时间，这个承诺可能会实现，也可能会被拒绝。<br>例如：A承诺(promise)B，十年后娶B。在这十年里，这个承诺的状态是进行中(状态为pending)。十年后，如果A娶B，这个承诺就实现(状态变为resolved)了。如果A不娶B，这个承诺就被拒绝(转态变为rejected)了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (AMarryB) &#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, tenYear)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>B说：十年后如果A娶B(承诺resolved)，B就给A生猴子；如果A不娶B(承诺rejected)，B就给嫁给C；但无论如何(finally)，B都爱着A。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 十年后，A娶了B</span></span><br><span class="line">  BMakeMonkeyWithA()</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 十年后，A不娶B</span></span><br><span class="line">  BMarryC()</span><br><span class="line">&#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 无论如何</span></span><br><span class="line">  BStillLoveA()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>Promise</code>的状态一旦发生变化，就不会再变。<br><code>Promise</code>的状态只能变化一次，而且只能是下面两种之一：<br><code>pending</code> =&gt; <code>resolved</code>，即承诺达成<br><code>pending</code> =&gt; <code>rejected</code>，即承诺未达成</p></blockquote><h3 id="new-Promise"><a href="#new-Promise" class="headerlink" title="new Promise()"></a>new Promise()</h3><p>创建一个<code>Promise</code>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><p>把<code>Promise</code>实例的状态由<code>pending</code>转化为<code>resolved</code>，可以传参<br>也可以把普通对象转化为<code>Promise</code>对象，并立即转化为<code>resolved</code>状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// some async code here</span></span><br><span class="line">  resolve(param1)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h3><p>把<code>Promise</code>实例的状态由<code>pending</code>转化为<code>rejected</code>，可以传参<br>也可以把普通对象转化为<code>Promise</code>对象，并立即转化为<code>rejected</code>状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// some async code here</span></span><br><span class="line">  reject(param2)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h3><p><code>Promise</code>实例的回调函数，<code>Promise</code>实例的状态发生变化时调用。<br>有两个参数：<br>第一个参数是状态变为<code>resolved</code>的回调，接收<code>resolve()</code>传递的参数；<br>第二个是状态变为<code>rejected</code>的回调，接收<code>reject()</code>传递的参数；<br>第二个参数是可选的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function">(<span class="params">param1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve()的回调</span></span><br><span class="line">  <span class="comment">// do some thing here</span></span><br><span class="line">&#125;, (param2) =&gt; &#123;</span><br><span class="line">  <span class="comment">// reject()的回调</span></span><br><span class="line">  <span class="comment">// do some thing here</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h3><p><code>Promise</code>实例状态变为<code>rejected</code>的回调，<br><code>.then(null, rejectCallBack)</code>的别名，<br>接收<code>reject()</code>传递的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise.catch(<span class="function"><span class="params">param2</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reject()的回调</span></span><br><span class="line">  <span class="comment">// some code here</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h3><p>只要状态发生变化，就会执行<br>有一个回调参数，处于链式的末端<br>ES2018引入标准<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then()</span><br><span class="line">  .catch()</span><br><span class="line">  .finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 不接收任何参数</span></span><br><span class="line">    <span class="comment">// some code here</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Promise-prototype-done"><a href="#Promise-prototype-done" class="headerlink" title="Promise.prototype.done()"></a>Promise.prototype.done()</h3><p>捕捉可能出现的错误，并向全局抛出<br>处于链式的末端<br>可以有回调参数，也可以没有<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then()</span><br><span class="line">  .catch()</span><br><span class="line">  .done()</span><br></pre></td></tr></table></figure></p><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><p>将多个<code>Promise</code>实例包装成一个新的<code>Promise</code>实例<br>接收一个数组作为参数<br>数组的元素都是<code>Promise</code>实例<br>所有参数<code>Promise</code>实例状态都变化为<code>resolved</code>，该实例的状态才会变为<code>resolved</code>，所有参数<code>Promise</code>实例都可以向该实例传参，这些参数会被包装成一个数组，传给改实例<br>有一个参数<code>Promise</code>实例的状态变为<code>rejected</code>，该实例的状态立即变为<code>rejected</code>，率先发生状态变化的参数<code>Promise</code>实例，可以把参数传给该实例<br>例如：猴王承诺花十年时间同时和三千妃嫔生猴子，十年后，最聪明的小公猴立为太子，最漂亮的小母猴立为公主，但是如果发现有的小猴子不像猴王，承诺作废。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.all([ makeMonkeyWith1, makeMonkeyWith2, ...])</span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="params">monkeys</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// monkeys是所有小猴子的数组</span></span><br><span class="line">    monkeys.map(<span class="function"><span class="params">monkey</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(isMale(monkey) &amp;&amp; isMostClever(monkey)) &#123;</span><br><span class="line">        bePrince(monkey)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFemale(monkey) &amp;&amp; isMostBeautiful(monkey)) &#123;</span><br><span class="line">        bePrincess(monkey)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        beGone(monkey)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    monkeyKingHadGreenHats()</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><p>将多个<code>Promise</code>实例包装成一个新的<code>Promise</code>实例<br>接收一个数组作为参数<br>数组的元素都是<code>Promise</code>实例<br>任何一个参数<code>Promise</code>实例状态发生变化，都会改变该实例的状态<br>率先发生状态变化的参数<code>Promise</code>实例，可以把参数传给该实例<br>例如：猴王承诺同时和三千妃嫔生猴子，第一个出生的如果是公猴立为太子，如果是母猴立为公主。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.race([ makeMonkeyWith1InTenYear, makeMonkeyWith2InTenYear, ...])</span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="params">monkey</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// monkey是第一个出生的小猴子</span></span><br><span class="line">    <span class="keyword">if</span>(isMale(monkey)) &#123;</span><br><span class="line">      bePrince(monkey)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFemale(monkey)) &#123;</span><br><span class="line">      bePrincess(monkey)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      beGone(monkey)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    neverBelieveInLove()</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1. 理解Promise&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2. new Promise()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;3. Promise.resolve()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;4. Promise.reject()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;5. Promise.prototype.then()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;6. Promise.prototype.catch()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;7. Promise.prototype.finally()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;8. Promise.prototype.done()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;9. Promise.all()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;10. Promise.race()&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="es6-promise" scheme="https://finchratel.github.io/tags/es6-promise/"/>
    
  </entry>
  
</feed>

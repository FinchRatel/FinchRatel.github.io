<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远上寒山石径斜</title>
  
  <subtitle>白云深处有人家</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://finchratel.github.io/"/>
  <updated>2020-01-11T03:59:48.128Z</updated>
  <id>https://finchratel.github.io/</id>
  
  <author>
    <name>Finch Ratel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6 · Map</title>
    <link href="https://finchratel.github.io/2020/01/11/es6-learn-010/"/>
    <id>https://finchratel.github.io/2020/01/11/es6-learn-010/</id>
    <published>2020-01-11T03:21:46.000Z</published>
    <updated>2020-01-11T03:59:48.128Z</updated>
    
    <content type="html"><![CDATA[<p><strong>new Map()</strong><br><strong>size</strong><br><strong>set(k, v)</strong><br><strong>get(k)</strong><br><strong>has(k)</strong><br><strong>delete(k)</strong><br><strong>clear()</strong><br><strong>keys()</strong><br><strong>values()</strong><br><strong>entries()</strong><br><strong>forEach()</strong></p><a id="more"></a><p>Object–string: value<br>Map–any: value</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// Map &#123;&#125;</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>([ [<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'b'</span>, <span class="number">2</span>] ]); <span class="comment">// Map &#123; a =&gt; 1, b =&gt; 2&#125;</span></span><br><span class="line">m.set(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">'date'</span>).set(<span class="keyword">new</span> <span class="built_in">Array</span>(), []).set(m1, <span class="string">'map'</span>);</span><br><span class="line">m.get(m1);</span><br><span class="line">m.delete(m1);</span><br><span class="line">m.keys();</span><br><span class="line">m.values();</span><br><span class="line">m.entries();</span><br><span class="line">m.forEach(<span class="function">(<span class="params">value,key</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;new Map()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;set(k, v)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;get(k)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;has(k)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;delete(k)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;clear()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;entries()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;forEach()&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="map" scheme="https://finchratel.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Set</title>
    <link href="https://finchratel.github.io/2020/01/10/es6-learn-009/"/>
    <id>https://finchratel.github.io/2020/01/10/es6-learn-009/</id>
    <published>2020-01-10T07:03:36.000Z</published>
    <updated>2020-01-10T07:12:03.827Z</updated>
    
    <content type="html"><![CDATA[<p><strong>new Set()</strong><br><strong>size</strong><br><strong>has()</strong><br><strong>add()</strong><br><strong>delete()</strong><br><strong>clear()</strong><br><strong>keys()</strong><br><strong>values()</strong><br><strong>entries()</strong><br><strong>forEach()</strong></p><a id="more"></a><h2 id="new-Set-argv"><a href="#new-Set-argv" class="headerlink" title="new Set(argv)"></a>new Set(argv)</h2><p>argv: array, string<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'abcdefg'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="size"><a href="#size" class="headerlink" title="size"></a>size</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1.size <span class="comment">//3</span></span><br><span class="line">s2.size <span class="comment">//7</span></span><br></pre></td></tr></table></figure><h2 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1.has(<span class="number">1</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h2><p>可以链式调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1.add(<span class="number">4</span>).add(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></p><h2 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1.delete(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1.clear();</span><br></pre></td></tr></table></figure><h2 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1.keys();</span><br></pre></td></tr></table></figure><h2 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1.values();</span><br></pre></td></tr></table></figure><h2 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1.values();</span><br></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;new Set()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;has()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;add()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;delete()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;clear()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;keys()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;values()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;entries()&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;forEach()&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="set" scheme="https://finchratel.github.io/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Array 常用方法</title>
    <link href="https://finchratel.github.io/2020/01/09/es6-learn-008/"/>
    <id>https://finchratel.github.io/2020/01/09/es6-learn-008/</id>
    <published>2020-01-09T08:06:49.000Z</published>
    <updated>2020-01-10T03:09:44.565Z</updated>
    
    <content type="html"><![CDATA[<p><strong>数组求和</strong><br><strong>数组最大值</strong><br><strong>数组最小值</strong><br><strong>数组去重</strong><br><strong>检查数组是否有重复项</strong><br><strong>查找数组中的重复项</strong><br><strong>两个数组的交集</strong><br><strong>两个数组的差集</strong><br><strong>两个数组的并集</strong></p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">const</span> list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组求和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeSum</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list.reduce(<span class="function">(<span class="params">pv, cv</span>) =&gt;</span> pv + cv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeMax</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(...list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组最小值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeMin</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min(...list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组去重</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeRepeat</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(list)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查数组是否有重复项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasRepeat</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list.length !== <span class="keyword">new</span> <span class="built_in">Set</span>(list).size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找数组中的重复项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRepeat1</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> tem = [];</span><br><span class="line">  list.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (tem.includes(item)) &#123;</span><br><span class="line">      res.push(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tem.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRepeat2</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; list.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (list[j] === list[i]) &#123;</span><br><span class="line">        res.push(list[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个数组的交集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIntersection</span>(<span class="params">list1, list2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  list1.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list2.includes(item)) &#123;</span><br><span class="line">      res.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(res)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个数组的差集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDiff</span>(<span class="params">list1, list2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  list1.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!list2.includes(item)) &#123;</span><br><span class="line">      res.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(res)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个数组的并集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUnion</span>(<span class="params">list1, list2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>([...list1, ...list2])];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;数组求和&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;数组最大值&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;数组最小值&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;数组去重&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;检查数组是否有重复项&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;查找数组中的重复项&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;两个数组的交集&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;两个数组的差集&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;两个数组的并集&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="array" scheme="https://finchratel.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>console 常用方法</title>
    <link href="https://finchratel.github.io/2019/12/23/nodejs-learn-002/"/>
    <id>https://finchratel.github.io/2019/12/23/nodejs-learn-002/</id>
    <published>2019-12-23T03:44:23.000Z</published>
    <updated>2019-12-23T07:21:28.445Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  log,</span><br><span class="line">  info,</span><br><span class="line">  warn,</span><br><span class="line">  debug,</span><br><span class="line">  error,</span><br><span class="line">  assert,</span><br><span class="line">  clear,</span><br><span class="line">  count,</span><br><span class="line">  countReset,</span><br><span class="line">  group,</span><br><span class="line">  groupEnd,</span><br><span class="line">  table,</span><br><span class="line">  time,</span><br><span class="line">  timeLog,</span><br><span class="line">  timeEnd,</span><br><span class="line">  trace</span><br><span class="line">&#125; = <span class="built_in">console</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><ol><li><p>log info warn debug<br><code>info</code> <code>warn</code> <code>debug</code> 是 <code>log</code> 的别名</p></li><li><p>assert<br>简单的断言测试，断言为假的时候才输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(<span class="literal">true</span>, <span class="string">'ok'</span>);</span><br><span class="line"><span class="built_in">console</span>.assert(<span class="literal">false</span>, <span class="string">'not ok'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assertion failed: not ok</span></span><br></pre></td></tr></table></figure></li><li><p>clear<br>清理终端输出信息，不同系统不同shell表现有所不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.clear();</span><br></pre></td></tr></table></figure></li><li><p>count countReset<br>count 计数<br>countreset 重置计数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.count(<span class="string">'count1'</span>);</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'count1'</span>);</span><br><span class="line"><span class="built_in">console</span>.countReset(<span class="string">'count1'</span>);</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'count1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// count1: 1</span></span><br><span class="line"><span class="comment">// count1: 2</span></span><br><span class="line"><span class="comment">// count1: 1</span></span><br></pre></td></tr></table></figure></li><li><p>group groupEnd<br><code>group</code> 将后续行的缩进增加两个空格<br><code>groupEnd</code> 减少后续行的缩进两个空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">'group1'</span>);</span><br><span class="line"><span class="built_in">console</span>.count();</span><br><span class="line"><span class="built_in">console</span>.count();</span><br><span class="line"><span class="built_in">console</span>.groupEnd(<span class="string">'group1'</span>);</span><br><span class="line"><span class="built_in">console</span>.count();</span><br><span class="line"></span><br><span class="line"><span class="comment">// group1</span></span><br><span class="line"><span class="comment">//   default: 1</span></span><br><span class="line"><span class="comment">//   default: 2</span></span><br><span class="line"><span class="comment">// default: 3</span></span><br></pre></td></tr></table></figure></li><li><p>table<br><code>table</code> 输出表格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table([&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span>&#125;], [<span class="string">'a'</span>, <span class="string">'b'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ┌─────────┬───┬───┐</span></span><br><span class="line"><span class="comment">// │ (index)    │ a  │ b │</span></span><br><span class="line"><span class="comment">// ├─────────┼───┼───┤</span></span><br><span class="line"><span class="comment">// │    0       │ 1  │ 2 │</span></span><br><span class="line"><span class="comment">// │    1       │ 3  │ 4 │</span></span><br><span class="line"><span class="comment">// └─────────┴───┴───┘</span></span><br></pre></td></tr></table></figure></li><li><p>time timeLog timeEnd<br><code>time</code> 开始计时<br><code>timeLog</code> 输出计时持续时间<br><code>timeEnd</code> 结束计时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time();</span><br><span class="line"><span class="built_in">console</span>.timeLog();</span><br><span class="line"><span class="built_in">console</span>.timeEnd();</span><br><span class="line"></span><br><span class="line"><span class="comment">// default: 0.105ms</span></span><br><span class="line"><span class="comment">// default: 6.221ms</span></span><br></pre></td></tr></table></figure></li><li><p>trace<br>将 util.format() 格式化的消息和堆栈跟踪打印到代码中的当前位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.trace(<span class="string">'trace1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trace: trace1</span></span><br><span class="line"><span class="comment">//     at Object.&lt;anonymous&gt; (C:\Users\zhanghao30\Desktop\document\test.js:16:9)</span></span><br><span class="line"><span class="comment">//     at Module._compile (internal/modules/cjs/loader.js:956:30)</span></span><br><span class="line"><span class="comment">//     at Object.Module._extensions..js (internal/modules/cjs/loader.js:973:10)</span></span><br><span class="line"><span class="comment">//     at Module.load (internal/modules/cjs/loader.js:812:32)</span></span><br><span class="line"><span class="comment">//     at Function.Module._load (internal/modules/cjs/loader.js:724:14)</span></span><br><span class="line"><span class="comment">//     at Function.Module.runMain (internal/modules/cjs/loader.js:1025:10)</span></span><br><span class="line"><span class="comment">//     at internal/main/run_main_module.js:17:11</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  info,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  warn,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  debug,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  error,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  assert,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  clear,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  count,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  countReset,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  group,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  groupEnd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  table,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  time,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  timeLog,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  timeEnd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  trace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; = &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="nodejs" scheme="https://finchratel.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://finchratel.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>vscode 使用技巧1</title>
    <link href="https://finchratel.github.io/2019/12/23/vscode-learn-001/"/>
    <id>https://finchratel.github.io/2019/12/23/vscode-learn-001/</id>
    <published>2019-12-23T03:10:49.000Z</published>
    <updated>2019-12-23T03:43:50.313Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 局部格式化 </strong><br><strong> 折叠全部标签 </strong><br><strong> 打开全部标签 </strong><br><strong> 折叠当前标签 </strong><br><strong> 打开当前标签 </strong></p><a id="more"></a><ol><li><p>局部格式化<br><code>CTRL + K  CTRL + F</code></p></li><li><p>折叠全部标签<br><code>CTRL + K  CTRL + 0</code></p></li><li><p>打开全部标签<br><code>CTRL + K CTRL + J</code></p></li><li><p>折叠当前标签<br><code>CTRL + SHIFT + [</code></p></li><li><p>打开当前标签<br><code>CTRL + SHIFT + ]</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 局部格式化 &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; 折叠全部标签 &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; 打开全部标签 &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; 折叠当前标签 &lt;/strong&gt;&lt;br&gt;&lt;strong&gt; 打开当前标签 &lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="editor" scheme="https://finchratel.github.io/categories/editor/"/>
    
    
      <category term="vscode" scheme="https://finchratel.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>git 在线学习</title>
    <link href="https://finchratel.github.io/2019/12/16/git-learn-002/"/>
    <id>https://finchratel.github.io/2019/12/16/git-learn-002/</id>
    <published>2019-12-16T08:57:17.000Z</published>
    <updated>2019-12-23T03:10:04.420Z</updated>
    
    <content type="html"><![CDATA[<p><strong>分享一个git的在线学习网站</strong><br><strong>每个命令都有动画演示，还有沙盒模式，可以自由操练</strong><br><strong>每个关卡都有练习题目，每个题目都有最少的完成步骤</strong><br><strong>教程比较基础，适合新手，学完大约需要花费半天时间</strong></p><a id="more"></a><h3 id="Learn-Git-Branching"><a href="#Learn-Git-Branching" class="headerlink" title="Learn Git Branching"></a>Learn Git Branching</h3><ol><li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">官网</a></li><li><a href="https://github.com/pcottle/learnGitBranching" target="_blank" rel="noopener">github</a></li><li><a href="https://learngitbranching.js.org/?NODEMO" target="_blank" rel="noopener">sand box</a></li></ol><h3 id="几个常用的命令"><a href="#几个常用的命令" class="headerlink" title="几个常用的命令"></a>几个常用的命令</h3><ol><li><code>undo</code> 撤销一步</li><li><code>reset</code> 重新开始关卡</li><li><code>levels</code> 重新选择关卡</li><li><code>show solution</code> 显示答案</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;分享一个git的在线学习网站&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;每个命令都有动画演示，还有沙盒模式，可以自由操练&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;每个关卡都有练习题目，每个题目都有最少的完成步骤&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;教程比较基础，适合新手，学完大约需要花费半天时间&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://finchratel.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://finchratel.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>网摘</title>
    <link href="https://finchratel.github.io/2019/05/10/other-001/"/>
    <id>https://finchratel.github.io/2019/05/10/other-001/</id>
    <published>2019-05-10T08:38:54.000Z</published>
    <updated>2019-12-16T08:56:56.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="码农"><a href="#码农" class="headerlink" title="码农"></a>码农</h2><p>前几天，我听一个广播节目。主持人问，现在很多人开网约车，这样能赚多少钱，能够赚到大钱吗？</p><a id="more"></a><p>这个问题很容易回答，答案就是不能。出租车司机的收入，主要由营业时间的长短决定。基本上，一天开12个小时，就是比开6个小时，收入高出一倍。每天只有24个小时，因此收入存在上限，不可能偏离平均水平很远。</p><p>出租车是“时间换收入”的典型行业，投入的时间越多，收入越高，在家休息就没收入。很多行业都属于“时间换收入”，所有此类行业都赚不到大钱。因为你能用来交换的时间是有限的，而且进入中年以后，你就拿不出更多的时间来交换。开出租车赚零花钱，或者作为短期过渡，这是没问题的，但作为终身职业是很糟糕的。</p><p>我觉得，越来越多的程序员正在落入这个陷井，用编码的时间换取收入。只有不停地做项目，才能拿到钱。项目做得越多，收入越高。这个项目开发完了，公司又让他去干下一个项目。 忙了好几年，项目完成了一大堆，但是自己什么也没留下，以后的收入还要取决于从零开始的新项目。这样的话，你跟出租车司机有何两样，哪一天你不写代码了，不是照样没收入。</p><p>那些赚到大钱的人，没有一个是靠时间换取收入的。他们要么通过积累资产致富，要么购买他人的时间，为自己创造财富。你应该警惕，不要落入“时间换取收入”的陷井，不要只顾着为别人生产代码，而要注意积累自己的资产，以及适时开展属于自己的业务。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;码农&quot;&gt;&lt;a href=&quot;#码农&quot; class=&quot;headerlink&quot; title=&quot;码农&quot;&gt;&lt;/a&gt;码农&lt;/h2&gt;&lt;p&gt;前几天，我听一个广播节目。主持人问，现在很多人开网约车，这样能赚多少钱，能够赚到大钱吗？&lt;/p&gt;
    
    </summary>
    
      <category term="excerpt" scheme="https://finchratel.github.io/categories/excerpt/"/>
    
    
      <category term="excerpt" scheme="https://finchratel.github.io/tags/excerpt/"/>
    
  </entry>
  
  <entry>
    <title>魔术字符串</title>
    <link href="https://finchratel.github.io/2019/05/05/js-learn-004/"/>
    <id>https://finchratel.github.io/2019/05/05/js-learn-004/</id>
    <published>2019-05-05T08:34:10.000Z</published>
    <updated>2019-12-16T07:50:49.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="魔术字符串"><a href="#魔术字符串" class="headerlink" title="魔术字符串"></a>魔术字符串</h2><p>在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;魔术字符串&quot;&gt;&lt;a href=&quot;#魔术字符串&quot; class=&quot;headerlink&quot; title=&quot;魔术字符串&quot;&gt;&lt;/a&gt;魔术字符串&lt;/h2&gt;&lt;p&gt;在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清
      
    
    </summary>
    
      <category term="h5" scheme="https://finchratel.github.io/categories/h5/"/>
    
    
      <category term="h5" scheme="https://finchratel.github.io/tags/h5/"/>
    
  </entry>
  
  <entry>
    <title>localStorage &amp;&amp; sessionStorage</title>
    <link href="https://finchratel.github.io/2019/05/05/js-learn-003/"/>
    <id>https://finchratel.github.io/2019/05/05/js-learn-003/</id>
    <published>2019-05-05T08:34:10.000Z</published>
    <updated>2020-01-11T04:01:48.276Z</updated>
    
    <content type="html"><![CDATA[<p><strong>setItem(key, value)</strong><br><strong>getItem(key)</strong><br><strong>removeItem(key)</strong><br><strong>clear()</strong></p><a id="more"></a><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> storage = localStorage <span class="comment">// or sessionStorage</span></span><br><span class="line"><span class="comment">// 增 改</span></span><br><span class="line">storage.setItem(<span class="string">'version'</span>, <span class="string">'0.2.0'</span>)</span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line">storage.getItem(<span class="string">'version'</span>)</span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">storage.removeItem(<span class="string">'version'</span>)</span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">storage.clear()</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="noopener">MDN web docs – Window​.local​Storage</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noopener">MDN web docs – Window​.session​Storage</a><br><a href="https://www.cnblogs.com/st-leslie/p/5617130.html" target="_blank" rel="noopener">localStorage使用总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;setItem(key, value)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;getItem(key)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;removeItem(key)&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;clear()&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="h5" scheme="https://finchratel.github.io/categories/h5/"/>
    
    
      <category term="h5" scheme="https://finchratel.github.io/tags/h5/"/>
    
  </entry>
  
  <entry>
    <title>typescript</title>
    <link href="https://finchratel.github.io/2019/04/08/typescript-learn-001/"/>
    <id>https://finchratel.github.io/2019/04/08/typescript-learn-001/</id>
    <published>2019-04-08T06:17:37.000Z</published>
    <updated>2019-12-16T07:50:49.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><blockquote><p>TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="string">"Jane User"</span>;</span><br><span class="line">greeter(user);</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>interface<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    fullName: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> firstName: <span class="built_in">string</span>, <span class="keyword">public</span> middleInitial: <span class="built_in">string</span>, <span class="keyword">public</span> lastName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + middleInitial + <span class="string">" "</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person : Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> Student(<span class="string">"Jane"</span>, <span class="string">"M."</span>, <span class="string">"User"</span>);</span><br><span class="line">greeter(user);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类型注解&quot;&gt;&lt;a href=&quot;#类型注解&quot; class=&quot;headerlink&quot; title=&quot;类型注解&quot;&gt;&lt;/a&gt;类型注解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
      <category term="typescript" scheme="https://finchratel.github.io/categories/typescript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript · String</title>
    <link href="https://finchratel.github.io/2019/01/02/js-learn-002/"/>
    <id>https://finchratel.github.io/2019/01/02/js-learn-002/</id>
    <published>2019-01-02T08:33:25.000Z</published>
    <updated>2019-12-16T07:50:49.098Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ES5 String API</strong><br><strong>ES6 String API</strong></p><a id="more"></a><h3 id="ES5-String-API"><a href="#ES5-String-API" class="headerlink" title="ES5 String API"></a>ES5 String API</h3><ol><li>sub()</li><li>sup()</li><li>big()</li><li>small()</li><li>strike()</li><li>bold()</li><li>italics()</li><li>blink()</li><li>link()</li><li>anchor()</li><li>fixed()</li><li>fontsize()</li><li>fontcolor()</li><li>charAt()</li><li>charCodeAt()</li><li>fromCharCode()</li><li>indexOf()</li><li>lastIndexOf()</li><li>match()</li><li>replace()</li><li>search()</li><li>localCompare()</li><li>split()</li><li>concat()</li><li>substr(start, length)</li><li>substring(start, end)</li><li>slice(start, end) 接收负参数</li><li>toLocaleLowerCase()</li><li>toLocaleUpperCase()</li><li>toLowerCase()</li><li>toUpperCase()</li><li>toSource()</li><li>toString()</li><li>valueOf()</li></ol><blockquote><p><a href="http://www.w3school.com.cn/jsref/jsref_obj_string.asp" target="_blank" rel="noopener">参考文档</a></p></blockquote><hr><h3 id="ES6-String-API"><a href="#ES6-String-API" class="headerlink" title="ES6 String API"></a>ES6 String API</h3><ol><li>字符串的Unicode表示法</li><li>codePointAt() &amp;&amp; charCodeAt()</li><li>fromCodePoint() &amp;&amp; fromCharCode()</li><li>for…of遍历</li><li>normalize()</li><li>includes()</li><li>startWith()</li><li>endsWith()</li><li>repeat()</li><li>padStart()</li><li>padEnd()</li><li>matchAll()</li><li>模板字符串 ``</li><li>String.raw()</li></ol><blockquote><p><a href="http://es6.ruanyifeng.com/#docs/string" target="_blank" rel="noopener">参考文档</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ES5 String API&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;ES6 String API&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://finchratel.github.io/categories/javascript/"/>
    
    
      <category term="string" scheme="https://finchratel.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript · Array</title>
    <link href="https://finchratel.github.io/2019/01/02/js-learn-001/"/>
    <id>https://finchratel.github.io/2019/01/02/js-learn-001/</id>
    <published>2019-01-02T02:03:44.000Z</published>
    <updated>2019-12-16T07:50:49.097Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ES5 Array API</strong><br><strong>ES6 Array API</strong><br><strong>JS Array 遍历</strong><br><strong>参考文档</strong></p><a id="more"></a><h3 id="ES5-Array-API"><a href="#ES5-Array-API" class="headerlink" title="ES5 Array API"></a>ES5 Array API</h3><ol><li>concat(p1[array or number], p2…)</li><li>join(separator)</li><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>reverse()</li><li>slice(start, end)</li><li>splice(start, number, item1,…,itemx)</li><li>sort(sortBy)</li><li>toSource()</li><li>toString()</li><li>toLocaleString()</li><li>valueOf()</li></ol><h3 id="ES6-Array-API"><a href="#ES6-Array-API" class="headerlink" title="ES6 Array API"></a>ES6 Array API</h3><ol><li>扩展云算符 …</li><li>Array.from()</li><li>Array.of()</li><li>copyWithin(target, start = 0, end = this.length)</li><li>find()</li><li>findIndex()</li><li>fill()</li><li>keys()</li><li>values()</li><li>entries()</li><li>includes()</li><li>flat()</li><li>flatMap()</li></ol><h3 id="JS-Array-遍历"><a href="#JS-Array-遍历" class="headerlink" title="JS Array 遍历"></a>JS Array 遍历</h3><ol><li>for…in</li><li>for…of</li><li>forEach()</li><li>reduce()</li><li>map()</li><li>flatMap()</li><li>find() 返回符合条件的第一个子元素</li><li>findIndex()</li><li>filter() 返回包含所有符合条件的子元素的数组</li><li>every()</li><li>some()</li><li>keys()</li><li>values()</li><li>entries()</li></ol><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol><li><a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="noopener">ES5 Array 参考文档</a></li><li><a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">ES6 Array 参考文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ES5 Array API&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;ES6 Array API&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;JS Array 遍历&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;参考文档&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://finchratel.github.io/categories/javascript/"/>
    
    
      <category term="array" scheme="https://finchratel.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Number</title>
    <link href="https://finchratel.github.io/2018/12/25/es6-learn-007/"/>
    <id>https://finchratel.github.io/2018/12/25/es6-learn-007/</id>
    <published>2018-12-25T09:53:48.000Z</published>
    <updated>2019-12-16T07:50:49.080Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Number</strong></p><a id="more"></a><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul><li>0b11 //3</li><li>0B11 //3</li><li>0o11 //9</li><li>0O11 //9</li><li>toSting([2, 8, 10, 16]) //转为二进制、八进制、十进制、十六进制字符串</li><li>Number(0b11) //转十进制</li><li>Number.isFinate() </li><li>Number.isNaN()</li><li>Number.parseInt()</li><li>Number.parseFloat()</li><li>Number.isInteger() //由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，Number.isInteger可能会误判。</li><li>Number.EPSILON === Math.pow(2, -52) //表示 1 与大于 1 的最小浮点数之间的差。</li><li>Number.MAX_SAFE_INTEGER === Math.pow(2, 53)</li><li>Number.MIN_SAFE_INTEGER === Math.pow(2, -53)</li><li><p>Number.isSafeInteger(n) //Number.MIN_SAFE_INTEGER &lt; n &lt; Number.MAX_SAFE_INTEGER</p></li><li><p>Math.trunc(3.14) //3 返回整数部分</p></li><li>Math.sign()</li><li>Math.cbrt() //返回立方根</li><li>Math.hypot() //返回参数平方和的平方根</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Number&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="number" scheme="https://finchratel.github.io/tags/number/"/>
    
  </entry>
  
  <entry>
    <title>博客计划 · 2019年</title>
    <link href="https://finchratel.github.io/2018/12/25/plan-blog-2019/"/>
    <id>https://finchratel.github.io/2018/12/25/plan-blog-2019/</id>
    <published>2018-12-25T03:42:40.000Z</published>
    <updated>2019-12-16T07:50:49.108Z</updated>
    
    <content type="html"><![CDATA[<p><strong>博客计划 · 2019年</strong></p><a id="more"></a><ul><li style="list-style: none"><input type="checkbox"> <code>es6</code></li><li style="list-style: none"><input type="checkbox"> <code>vue</code></li><li style="list-style: none"><input type="checkbox"> <code>nodejs</code></li><li style="list-style: none"><input type="checkbox"> <code>webpack</code></li><li style="list-style: none"><input type="checkbox"> <code>vscode</code></li><li style="list-style: none"><input type="checkbox"> <code>nodejs</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;博客计划 · 2019年&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="plan" scheme="https://finchratel.github.io/categories/plan/"/>
    
    
      <category term="plan-blod" scheme="https://finchratel.github.io/tags/plan-blod/"/>
    
  </entry>
  
  <entry>
    <title>CSS · Flex</title>
    <link href="https://finchratel.github.io/2018/12/06/web-learn-001/"/>
    <id>https://finchratel.github.io/2018/12/06/web-learn-001/</id>
    <published>2018-12-06T07:53:15.000Z</published>
    <updated>2019-12-16T07:50:49.122Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CSS · Flex</strong></p><a id="more"></a><table><thead><tr><th><code>main axis</code> 主轴</th><th><code>cross axis</code> 交叉轴</th></tr></thead><tbody><tr><td><code>main start</code> 主轴起点</td><td><code>cross start</code> 交叉轴起点</td></tr><tr><td><code>main end</code> 主轴终点</td><td><code>cross end</code> 交叉轴终点</td></tr><tr><td><code>main size</code> 主轴方向大小</td><td><code>cross size</code> 交叉轴方向大小</td></tr></tbody></table><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><p><code>display: flex</code></p><ul><li>指定flex布局，此时<code>float</code>、<code>clear</code>、<code>vertical-align</code>属性将失效</li></ul><p><code>flex-direction</code> 主轴方向</p><ul><li><code>row</code> 默认 主轴为水平方向，起点在左端</li><li><code>row-reverse</code> 主轴为水平方向，起点在右端</li><li><code>column</code> 主轴为垂直方向，起点在上端</li><li><code>column-reverse</code> 主轴为垂直方向，起点在下端</li></ul><p><code>flex-wrap</code> 是否换行</p><ul><li><code>nowrap</code> 默认 不换行</li><li><code>wrap</code> 换行</li><li><code>wrap-reverse</code> 反向换行</li></ul><p><code>flex-flow</code> 主轴方向和是否换行</p><ul><li><code>row nowrap</code> 默认</li><li><code>flex-direction</code> 和 <code>flex-wrap</code> 的缩写</li></ul><p><code>justify-content</code> 主轴对齐方式</p><ul><li><code>flex-start</code> 默认 主轴起点对齐</li><li><code>flex-end</code> 主轴终点对齐</li><li><code>center</code> 主轴居中对齐</li><li><code>space-between</code> 主轴两端对齐</li><li><code>space-around</code> 间隔相等</li></ul><p><code>align-items</code> 交叉轴对齐方式</p><ul><li><code>stretch</code> 默认 拉伸 如果未设置高度或设置为auto，将占满整个高度</li><li><code>flex-start</code> 交叉轴起点对齐</li><li><code>flex-end</code> 交叉轴终点对齐</li><li><code>center</code> 交叉轴居中对齐</li><li><code>baseline</code> 第一行文字的基线对齐</li></ul><p><code>align-content</code> 多根轴线的对齐方式，一根轴线时不生效</p><ul><li><code>stretch</code> 默认 拉伸 占满整个交叉轴</li><li><code>flex-start</code> 与交叉轴的起点对齐</li><li><code>flex-end</code> 与交叉轴的终点对齐</li><li><code>center</code> 与交叉轴的中点对齐</li><li><code>space-between</code> 交叉轴两端对齐</li><li><code>space-around</code> 间隔相等</li></ul><h3 id="子项属性"><a href="#子项属性" class="headerlink" title="子项属性"></a>子项属性</h3><p><code>order</code></p><ul><li>0 默认</li><li>子项的排列顺序，数字越小越靠前</li></ul><p><code>flex-grow</code></p><ul><li>子项放大比例</li><li>0 默认 不放大</li></ul><p><code>flex-shrink</code></p><ul><li>子项缩小比例</li><li>1 默认</li><li>0 不缩小</li></ul><p><code>flex-basis</code></p><ul><li>在分配多余空间之前，子项占据的主轴空间(main size)</li><li>auto 默认</li></ul><p><code>flex</code></p><ul><li><code>flex-grow</code> <code>flex-shrink</code> <code>flex-basis</code>的简写</li><li><code>0 1 auto</code> 默认</li></ul><p><code>align-self</code></p><ul><li>子项对齐方式，覆盖<code>align-items</code></li><li>auto 默认 继承父元素的<code>align-items</code></li></ul><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><p><img src="/images/holy_grail_layout.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .container &#123;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      flex-flow: column nowrap;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .header,</span></span><br><span class="line"><span class="undefined">    .footer &#123;</span></span><br><span class="line"><span class="undefined">      background: #eee;</span></span><br><span class="line"><span class="undefined">      flex: 0 0 56px;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      line-height: 56px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .main &#123;</span></span><br><span class="line"><span class="undefined">      height: 400px;</span></span><br><span class="line"><span class="undefined">      background: #ddd;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      line-height: 400px;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .left &#123;</span></span><br><span class="line"><span class="undefined">      flex: 0 0 160px;</span></span><br><span class="line"><span class="undefined">      background: #ccc;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .center &#123;</span></span><br><span class="line"><span class="undefined">      flex: 1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .right &#123;</span></span><br><span class="line"><span class="undefined">      flex: 0 0 160px;</span></span><br><span class="line"><span class="undefined">      background: #bbb;</span></span><br><span class="line"><span class="undefined">      align-self: flex-end;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>LEFT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>CENTER<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>RIGHT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CSS · Flex&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://finchratel.github.io/categories/web/"/>
    
    
      <category term="flex" scheme="https://finchratel.github.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Reflect</title>
    <link href="https://finchratel.github.io/2018/12/04/es6-learn-006/"/>
    <id>https://finchratel.github.io/2018/12/04/es6-learn-006/</id>
    <published>2018-12-04T06:41:28.000Z</published>
    <updated>2019-12-16T07:50:49.079Z</updated>
    
    <content type="html"><![CDATA[<p>Reflect.get()<br>Reflect.set()<br>Reflect.has()<br>Reflect.deleteProperty()<br>Reflect.construct()<br>Reflect.getPrototypeOf()<br>Reflect.setPrototypeOf()<br>Reflect.apply()<br>Reflect.defineProperty()<br>Reflect.getOwnPropertyDescriptor()<br>Reflect.isExtensible()<br>Reflect.preventExtensions()<br>Reflect.ownKeys()</p><a id="more"></a><h3 id="Reflect-get-target-name-receiver"><a href="#Reflect-get-target-name-receiver" class="headerlink" title="Reflect.get(target, name, receiver)"></a>Reflect.get(target, name, receiver)</h3><p>查找并返回target.name<br>如果name属性部署了getter，getter的this绑定receiver</p><h3 id="Reflect-set-target-name-value-receiver"><a href="#Reflect-set-target-name-value-receiver" class="headerlink" title="Reflect.set(target, name, value, receiver)"></a>Reflect.set(target, name, value, receiver)</h3><p>设置target的name属性值为value<br>如果name属性部署了setter，setter的this绑定receiver</p><h3 id="Reflect-has-obj-name"><a href="#Reflect-has-obj-name" class="headerlink" title="Reflect.has(obj, name)"></a>Reflect.has(obj, name)</h3><p>等同于 name in obj</p><h3 id="Reflect-deleteProperty-obj-name"><a href="#Reflect-deleteProperty-obj-name" class="headerlink" title="Reflect.deleteProperty(obj, name)"></a>Reflect.deleteProperty(obj, name)</h3><p>等同于 delete obj.name</p><h3 id="Reflect-construct-target-args"><a href="#Reflect-construct-target-args" class="headerlink" title="Reflect.construct(target, args)"></a>Reflect.construct(target, args)</h3><p>等同于 new target(…args)<br>不使用new调用构造函数的方式</p><h3 id="Reflect-getPrototypeOf-obj"><a href="#Reflect-getPrototypeOf-obj" class="headerlink" title="Reflect.getPrototypeOf(obj)"></a>Reflect.getPrototypeOf(obj)</h3><p>等同于 Object.getPrototypeOf(obj)<br>读取obj的<strong>proto</strong>属性</p><h3 id="Reflect-setPrototypeOf-obj-newProto"><a href="#Reflect-setPrototypeOf-obj-newProto" class="headerlink" title="Reflect.setPrototypeOf(obj, newProto)"></a>Reflect.setPrototypeOf(obj, newProto)</h3><p>等同于 Object.setPrototypeOf(obj, newProto)</p><h3 id="Reflect-apply-func-thisArgs-args"><a href="#Reflect-apply-func-thisArgs-args" class="headerlink" title="Reflect.apply(func, thisArgs, args)"></a>Reflect.apply(func, thisArgs, args)</h3><p>等同于 Function.prototype.apply.call(func, thisArgs, args)</p><h3 id="Reflect-defineProperty-target-propertyKey-attributies"><a href="#Reflect-defineProperty-target-propertyKey-attributies" class="headerlink" title="Reflect.defineProperty(target, propertyKey, attributies)"></a>Reflect.defineProperty(target, propertyKey, attributies)</h3><p>等同于 Object.defineProperty(target, propertyKey, attiruties)</p><h3 id="Reflect-getOwnPropertyDescriptor-target-propertyKey"><a href="#Reflect-getOwnPropertyDescriptor-target-propertyKey" class="headerlink" title="Reflect.getOwnPropertyDescriptor(target, propertyKey)"></a>Reflect.getOwnPropertyDescriptor(target, propertyKey)</h3><p>等同于 Object.getOwnPropertyDescriptor(target, propertyKey)</p><h3 id="Reflect-isExtensible-target"><a href="#Reflect-isExtensible-target" class="headerlink" title="Reflect.isExtensible(target)"></a>Reflect.isExtensible(target)</h3><p>等同于 Object.isExtensible(target)<br>target是否可扩展，返回布尔值</p><h3 id="Reflect-preventExtensible-target"><a href="#Reflect-preventExtensible-target" class="headerlink" title="Reflect.preventExtensible(target)"></a>Reflect.preventExtensible(target)</h3><p>等同于 Object.preventExtensible(target)<br>让target不可扩展</p><h3 id="Reflect-ownKeys-target"><a href="#Reflect-ownKeys-target" class="headerlink" title="Reflect.ownKeys(target)"></a>Reflect.ownKeys(target)</h3><p>等同于 Object.ownKeys(target)<br>返回一个对象的所有属性<br>Object.getOwnPropertyNames + Object.getOwnPropertySymbols</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reflect.get()&lt;br&gt;Reflect.set()&lt;br&gt;Reflect.has()&lt;br&gt;Reflect.deleteProperty()&lt;br&gt;Reflect.construct()&lt;br&gt;Reflect.getPrototypeOf()&lt;br&gt;Reflect.setPrototypeOf()&lt;br&gt;Reflect.apply()&lt;br&gt;Reflect.defineProperty()&lt;br&gt;Reflect.getOwnPropertyDescriptor()&lt;br&gt;Reflect.isExtensible()&lt;br&gt;Reflect.preventExtensions()&lt;br&gt;Reflect.ownKeys()&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="es6-reflect" scheme="https://finchratel.github.io/tags/es6-reflect/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Class继承</title>
    <link href="https://finchratel.github.io/2018/11/30/es6-learn-005/"/>
    <id>https://finchratel.github.io/2018/11/30/es6-learn-005/</id>
    <published>2018-11-30T08:22:01.000Z</published>
    <updated>2019-12-16T07:50:49.078Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ES6 · Class继承</strong></p><a id="more"></a><p>参考文档：<a href="http://es6.ruanyifeng.com/#docs/class-extends" target="_blank" rel="noopener">阮一峰 ECMAScript 6 入门 – Class的继承</a></p><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorLine</span> <span class="keyword">extends</span> <span class="title">Line</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>子类必须在constructor方法中调用super方法<br>如果子类没有constructor方法，constructor会被默认添加<br>在constructor方法中，只有调用super方法后，才能使用this<br>可继承原生构造函数(String/Number/Boolean/Array/Date/Error/Regexp/Function/Object)</p><h3 id="Object-getPrototypeOf-amp-amp-Reflect-getPrototypeOf"><a href="#Object-getPrototypeOf-amp-amp-Reflect-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf() &amp;&amp; Reflect.getPrototypeOf()"></a>Object.getPrototypeOf() &amp;&amp; Reflect.getPrototypeOf()</h3><p>判断一个类是否继承自另一个类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(ColorLine) === Line <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Reflect</span>.getPrototypeOf(ColorLine) === Line <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>每个对象都有一个名为<strong>proto</strong>的属性</li><li>每个构造函数都有一个名为prototype的方法</li><li>每个对象的<strong>proto</strong>指向自身构造函数的prototype</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(length) &#123;</span><br><span class="line">    <span class="keyword">this</span>.length = length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> line = <span class="keyword">new</span> Line(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(line.__proto__ === Line.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(line.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(line.__proto__.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// null &lt;= Object &lt;= Line &lt;= line</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Line.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Line.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Line.__proto__.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// null &lt;= Object &lt;= Function &lt;= Line</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.__proto__); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// Function &lt;= Object</span></span><br><span class="line"><span class="comment">// Function &lt;= Function</span></span><br></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul><li>作为函数 <code>super()</code><br>只能在子类的constructor方法中调用<br>子类constructor方法中必须调用一次super方法</li><li>用作对象<br>普通方法中，指向父类的原型对象<br>静态方法中，指向父类</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ES6 · Class继承&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="es6-class" scheme="https://finchratel.github.io/tags/es6-class/"/>
    
  </entry>
  
  <entry>
    <title>ES6 · Class基础</title>
    <link href="https://finchratel.github.io/2018/11/30/es6-learn-004/"/>
    <id>https://finchratel.github.io/2018/11/30/es6-learn-004/</id>
    <published>2018-11-30T08:11:16.000Z</published>
    <updated>2019-12-16T07:50:49.077Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ES6 · Class基础</strong></p><a id="more"></a><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Rectangle (width, height) &#123;</span><br><span class="line">  this.width = width;</span><br><span class="line">  this.height = height;</span><br><span class="line">&#125;</span><br><span class="line">Rectangle.prototype.getArea = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> this.width * this.height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const square = new Rectangle(4, 4);</span><br><span class="line">square.width //4</span><br><span class="line">square.height //4</span><br><span class="line">square.getArea() //16</span><br></pre></td></tr></table></figure><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Rectangle &#123;</span><br><span class="line">  constructor(width, height) &#123;</span><br><span class="line">    this.width = width;</span><br><span class="line">    this.height = height;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getArea</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this.width * this.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const square = new Rectangle(4, 4);</span><br><span class="line">square.width //4</span><br><span class="line">square.height //4</span><br><span class="line">square.getArea() //16</span><br></pre></td></tr></table></figure><ul><li><p><code>constructor</code><br>类的构造函数，实例化(new)时自动调用</p></li><li><p><code>static</code><br>静态方法<br>类可以调用，会被子类继承，子类也可以调用<br>不会被类的实例继承，类的实例无法调用<br>也不会被子类的实例继承，子类的实例也无法调用<br>this指向类，而不是实例</p></li><li><p><code>name</code><br>返回类的名称</p></li><li><p><code>new.target</code><br>返回实例化时调用的类<br>子类继承父类时，会返回子类</p></li></ul><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>类的所有方法都在原型上</li><li>类内部的方法，都是不可枚举的</li><li>类的属性名和方法名可以用表达式</li><li>类的内部默认启用严格模式</li><li>类不存在变量提升</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote><p>实例的属性，除非定义在this对象上，否则都定义在原型上<br>类的所有实例共享一个原型对象</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ES6 · Class基础&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="es6" scheme="https://finchratel.github.io/categories/es6/"/>
    
    
      <category term="es6-class" scheme="https://finchratel.github.io/tags/es6-class/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 小结03</title>
    <link href="https://finchratel.github.io/2018/11/29/vim-study-003/"/>
    <id>https://finchratel.github.io/2018/11/29/vim-study-003/</id>
    <published>2018-11-29T03:49:37.000Z</published>
    <updated>2019-12-16T07:50:49.119Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 小结03</strong></p><a id="more"></a><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul><li><code>expandtab</code> 是否将tab转化为空格</li><li><code>shfitwidth</code> &gt;&gt;或&lt;&lt;时缩进的列数</li><li><code>tabstop</code> 一个tab键所占的列数</li><li><code>softtabstop</code> tab实际占的列数</li><li><code>autoindent(ai)</code> 自动换行<figure class="highlight bash"><figcaption><span>.vimrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> softtabstop=4</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对应简写</span></span><br><span class="line"><span class="built_in">set</span> ai</span><br><span class="line"><span class="built_in">set</span> et</span><br><span class="line"><span class="built_in">set</span> sw=4</span><br><span class="line"><span class="built_in">set</span> ts=4</span><br><span class="line"><span class="built_in">set</span> sts=4</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 小结03&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-study" scheme="https://finchratel.github.io/tags/vim-study/"/>
    
  </entry>
  
  <entry>
    <title>VIM · 小结02</title>
    <link href="https://finchratel.github.io/2018/11/28/vim-study-002/"/>
    <id>https://finchratel.github.io/2018/11/28/vim-study-002/</id>
    <published>2018-11-28T05:57:43.000Z</published>
    <updated>2019-12-16T07:50:49.118Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VIM · 小结02</strong></p><a id="more"></a><h3 id="进入普通模式-Normal-mode"><a href="#进入普通模式-Normal-mode" class="headerlink" title="进入普通模式(Normal mode)"></a>进入普通模式(Normal mode)</h3><ul><li><code>Esc</code></li><li><code>CTRL + [</code></li></ul><h3 id="进入命令模式-Commant-line-mode"><a href="#进入命令模式-Commant-line-mode" class="headerlink" title="进入命令模式(Commant line mode)"></a>进入命令模式(Commant line mode)</h3><ul><li><code>:</code></li></ul><h3 id="进入插入模式-Insert-mode"><a href="#进入插入模式-Insert-mode" class="headerlink" title="进入插入模式(Insert mode)"></a>进入插入模式(Insert mode)</h3><ul><li><code>i</code> 在光标前插入</li><li><code>I</code> 在行首插入</li><li><code>a</code> 在光标后插入</li><li><code>A</code> 在行尾插入</li><li><code>o</code> 在下方插入一行</li><li><code>O</code> 在上方插入一行</li></ul><h3 id="进入可视模式-Visual-mode"><a href="#进入可视模式-Visual-mode" class="headerlink" title="进入可视模式(Visual mode)"></a>进入可视模式(Visual mode)</h3><ul><li><code>v</code></li></ul><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><ul><li><code>q</code></li><li><code>ZZ</code></li></ul><h3 id="常用命令一览"><a href="#常用命令一览" class="headerlink" title="常用命令一览"></a>常用命令一览</h3><table><thead><tr><th>模式</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>正常模式</td><td><code>b</code></td><td>跳转到前一个单词的开头</td></tr><tr><td>正常模式</td><td><code>ge</code></td><td>跳转到前一个单词的结尾</td></tr><tr><td>正常模式</td><td><code>f&lt;字母&gt;</code></td><td>向后搜索字母，并跳转到第一个匹配的位置</td></tr><tr><td>正常模式</td><td><code>F&lt;字母&gt;</code></td><td>向前搜索字母，并跳转到第一个匹配的位置</td></tr></tbody></table><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><ul><li><code>yy</code></li><li><code>y0</code></li><li><code>y^</code></li><li><code>y$</code></li><li><code>yw</code></li><li><code>yG</code></li><li><code>y1G</code></li></ul><h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><ul><li><code>p</code></li><li><code>P</code></li></ul><h3 id="change"><a href="#change" class="headerlink" title="change"></a>change</h3><ul><li>c [number] motion<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3></li><li>d [number] motion</li></ul><h3 id="上下行交换"><a href="#上下行交换" class="headerlink" title="上下行交换"></a>上下行交换</h3><ul><li><code>ddp</code></li></ul><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><ul><li><code>r</code> 替换当前光标位置</li><li><code>R</code> 连续替换</li><li><code>cc</code> 替换当前行</li><li><code>cw</code> 替换一个单词</li><li><code>C</code> 替换到行尾</li><li><code>~</code> 反转大小写</li><li><code>u</code> 撤销一次</li><li><code>U</code> 撤销当前行的所有更改</li><li><code>Ctrl + r</code> 取消撤销</li><li><code>:s/old/new/g</code> 替换当前行所有的old为new</li><li><code>:#,#s/old/new/g</code> 替换#行到#行的所有的old为new</li><li><code>:%s/old/new/g</code> 替换整个文档所有的old为new</li></ul><h3 id="提取内容"><a href="#提取内容" class="headerlink" title="提取内容"></a>提取内容</h3><ul><li><code>:r file</code> 提取file文件内容，插入光标所在位置</li><li><code>:r !ls</code> 提取ls命令输入内容，插入光标所在位置</li></ul><h3 id="文本位置"><a href="#文本位置" class="headerlink" title="文本位置"></a>文本位置</h3><ul><li><code>ce</code> 居中</li><li><code>ri</code> 居右</li><li><code>le</code> 居左</li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li><code>?&lt;单词&gt;</code> 向上查找word</li><li><code>/&lt;单词&gt;</code> 向下查找word</li><li><code>n</code> 下一个</li><li><code>N</code> 上一个</li><li><code>CTRL + O</code> 回到较旧的位置</li><li><code>CTRL + I9j</code> 回到较新的位置</li><li><code>\*</code> 向下查找光标所在单词</li><li><code>\#</code> 向上查找鼠标所在单词</li><li><code>%</code> 查找配对括号</li></ul><h3 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h3><ul><li><code>vim 1.txt 2.txt</code> 同时打开两个文件</li><li><code>:n</code> 编辑下一个文件</li><li><code>:N</code> 编辑上一个文件</li><li><code>:e 3.txt</code> 打开3.txt</li><li><code>:e#</code> 回到前一个文件</li><li><code>:ls</code> 列出已打开的文件</li><li><code>:b 2.txt</code> 编辑2.txt</li><li><code>:bd 2.txt</code> 删除已打开的文件列表中的2.txt</li><li><code>e! 4.txt</code> 强制打开4.txt</li><li><code>:f</code> 显示正在编辑的文件名</li><li><code>:f 5.txt</code> 另存为5.txt</li></ul><h3 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h3><ul><li><code>vim -r filename</code></li></ul><h3 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h3><ul><li><code>v</code> 字符选择</li><li><code>Shift + v</code> 行选择</li><li><code>Ctrl + v</code> 区域选择</li></ul><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul><li><code>&gt;&gt;</code> 向右缩进</li><li><code>&lt;&lt;</code> 向左缩进</li></ul><h3 id="视窗操作"><a href="#视窗操作" class="headerlink" title="视窗操作"></a>视窗操作</h3><ul><li><code>:new</code> 水平分屏</li><li><code>:sp</code> 水平分屏</li><li><code>:vsp</code> 垂直分屏</li><li><code>Ctrl + w s</code> 水平分屏</li><li><code>Ctrl + w v</code> 垂直分屏</li><li><code>Ctrl + w q</code> 关闭当前分屏</li><li><code>Ctrl + w o</code> 打开新视窗，并隐藏之前的所有视窗</li><li><code>Ctrl + w h</code> 切换到左侧分屏</li><li><code>Ctrl + w j</code> 切换到下面分屏</li><li><code>Ctrl + w k</code> 切换到上面分屏</li><li><code>Ctrl + w l</code> 切换到下册分屏</li><li><code>Ctrl + w H</code> 移动视窗到左侧</li><li><code>Ctrl + w J</code> 移动视窗值下面</li><li><code>Ctrl + w K</code> 移动视窗至上面</li><li><code>Ctrl + w L</code> 移动视窗至右侧</li><li><code>Ctrl + w -</code> 减小视窗高度</li><li><code>Ctrl + w +</code> 增加视窗高度</li></ul><h3 id="文档加密"><a href="#文档加密" class="headerlink" title="文档加密"></a>文档加密</h3><ul><li><code>vim -x file</code></li></ul><h3 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h3><ul><li><code>:!ls</code> 暂时退出vim并执行ls命令</li></ul><h3 id="选择性保存"><a href="#选择性保存" class="headerlink" title="选择性保存"></a>选择性保存</h3><ul><li><code>v</code> 进入可视模式</li><li><code>{move cursor}</code> 移动光标选择文本</li><li><code>:w</code> 保存</li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ul><li><code>:set</code> 显示所有修改过的配置</li><li><code>:set all</code> 显示所有的设定值</li><li><code>:set option?</code> 显示option的设定值</li><li><code>:set nooption</code> 取消当前设定值</li><li><code>:set autoindent(ai)</code> 设置自动缩进</li><li><code>:set autowrite(aw)</code> 设置自动保存，默认未打开</li><li><code>:set background=dark</code> 设置背景风格</li><li><code>:set backup(bk)</code> 设置自动备份，默认未打开</li><li><code>:set hlsearch(hls)</code> 高亮搜索匹配项</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VIM · 小结02&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="https://finchratel.github.io/categories/vim/"/>
    
    
      <category term="vim-study" scheme="https://finchratel.github.io/tags/vim-study/"/>
    
  </entry>
  
</feed>

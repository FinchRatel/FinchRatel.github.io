<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>console 常用方法</title>
    <url>/2019/12/23/nodejs-learn-002/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  log,</span><br><span class="line">  info,</span><br><span class="line">  warn,</span><br><span class="line">  debug,</span><br><span class="line">  error,</span><br><span class="line">  assert,</span><br><span class="line">  clear,</span><br><span class="line">  count,</span><br><span class="line">  countReset,</span><br><span class="line">  group,</span><br><span class="line">  groupEnd,</span><br><span class="line">  table,</span><br><span class="line">  time,</span><br><span class="line">  timeLog,</span><br><span class="line">  timeEnd,</span><br><span class="line">  trace</span><br><span class="line">&#125; = <span class="built_in">console</span>;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li><p>log info warn debug<br><code>info</code> <code>warn</code> <code>debug</code> 是 <code>log</code> 的别名</p>
</li>
<li><p>assert<br>简单的断言测试，断言为假的时候才输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(<span class="literal">true</span>, <span class="string">'ok'</span>);</span><br><span class="line"><span class="built_in">console</span>.assert(<span class="literal">false</span>, <span class="string">'not ok'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assertion failed: not ok</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>clear<br>清理终端输出信息，不同系统不同shell表现有所不同</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.clear();</span><br></pre></td></tr></table></figure>
</li>
<li><p>count countReset<br>count 计数<br>countreset 重置计数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.count(<span class="string">'count1'</span>);</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'count1'</span>);</span><br><span class="line"><span class="built_in">console</span>.countReset(<span class="string">'count1'</span>);</span><br><span class="line"><span class="built_in">console</span>.count(<span class="string">'count1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// count1: 1</span></span><br><span class="line"><span class="comment">// count1: 2</span></span><br><span class="line"><span class="comment">// count1: 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>group groupEnd<br><code>group</code> 将后续行的缩进增加两个空格<br><code>groupEnd</code> 减少后续行的缩进两个空格</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">'group1'</span>);</span><br><span class="line"><span class="built_in">console</span>.count();</span><br><span class="line"><span class="built_in">console</span>.count();</span><br><span class="line"><span class="built_in">console</span>.groupEnd(<span class="string">'group1'</span>);</span><br><span class="line"><span class="built_in">console</span>.count();</span><br><span class="line"></span><br><span class="line"><span class="comment">// group1</span></span><br><span class="line"><span class="comment">//   default: 1</span></span><br><span class="line"><span class="comment">//   default: 2</span></span><br><span class="line"><span class="comment">// default: 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>table<br><code>table</code> 输出表格</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.table([&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span>&#125;], [<span class="string">'a'</span>, <span class="string">'b'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ┌─────────┬───┬───┐</span></span><br><span class="line"><span class="comment">// │ (index)    │ a  │ b │</span></span><br><span class="line"><span class="comment">// ├─────────┼───┼───┤</span></span><br><span class="line"><span class="comment">// │    0       │ 1  │ 2 │</span></span><br><span class="line"><span class="comment">// │    1       │ 3  │ 4 │</span></span><br><span class="line"><span class="comment">// └─────────┴───┴───┘</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>time timeLog timeEnd<br><code>time</code> 开始计时<br><code>timeLog</code> 输出计时持续时间<br><code>timeEnd</code> 结束计时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.time();</span><br><span class="line"><span class="built_in">console</span>.timeLog();</span><br><span class="line"><span class="built_in">console</span>.timeEnd();</span><br><span class="line"></span><br><span class="line"><span class="comment">// default: 0.105ms</span></span><br><span class="line"><span class="comment">// default: 6.221ms</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>trace<br>将 util.format() 格式化的消息和堆栈跟踪打印到代码中的当前位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.trace(<span class="string">'trace1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trace: trace1</span></span><br><span class="line"><span class="comment">//     at Object.&lt;anonymous&gt; (C:\Users\zhanghao30\Desktop\document\test.js:16:9)</span></span><br><span class="line"><span class="comment">//     at Module._compile (internal/modules/cjs/loader.js:956:30)</span></span><br><span class="line"><span class="comment">//     at Object.Module._extensions..js (internal/modules/cjs/loader.js:973:10)</span></span><br><span class="line"><span class="comment">//     at Module.load (internal/modules/cjs/loader.js:812:32)</span></span><br><span class="line"><span class="comment">//     at Function.Module._load (internal/modules/cjs/loader.js:724:14)</span></span><br><span class="line"><span class="comment">//     at Function.Module.runMain (internal/modules/cjs/loader.js:1025:10)</span></span><br><span class="line"><span class="comment">//     at internal/main/run_main_module.js:17:11</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 使用技巧1</title>
    <url>/2019/12/23/vscode-learn-001/</url>
    <content><![CDATA[<p><strong> 局部格式化 </strong><br><strong> 折叠全部标签 </strong><br><strong> 打开全部标签 </strong><br><strong> 折叠当前标签 </strong><br><strong> 打开当前标签 </strong></p>
<a id="more"></a>
<ol>
<li><p>局部格式化<br><code>CTRL + K  CTRL + F</code></p>
</li>
<li><p>折叠全部标签<br><code>CTRL + K  CTRL + 0</code></p>
</li>
<li><p>打开全部标签<br><code>CTRL + K CTRL + J</code></p>
</li>
<li><p>折叠当前标签<br><code>CTRL + SHIFT + [</code></p>
</li>
<li><p>打开当前标签<br><code>CTRL + SHIFT + ]</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>editor</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>git 在线学习</title>
    <url>/2019/12/16/git-learn-002/</url>
    <content><![CDATA[<p><strong>分享一个git的在线学习网站</strong><br><strong>每个命令都有动画演示，还有沙盒模式，可以自由操练</strong><br><strong>每个关卡都有练习题目，每个题目都有最少的完成步骤</strong><br><strong>教程比较基础，适合新手，学完大约需要花费半天时间</strong></p>
<a id="more"></a>
<h3 id="Learn-Git-Branching"><a href="#Learn-Git-Branching" class="headerlink" title="Learn Git Branching"></a>Learn Git Branching</h3><ol>
<li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">官网</a></li>
<li><a href="https://github.com/pcottle/learnGitBranching" target="_blank" rel="noopener">github</a></li>
<li><a href="https://learngitbranching.js.org/?NODEMO" target="_blank" rel="noopener">sand box</a></li>
</ol>
<h3 id="几个常用的命令"><a href="#几个常用的命令" class="headerlink" title="几个常用的命令"></a>几个常用的命令</h3><ol>
<li><code>undo</code> 撤销一步</li>
<li><code>reset</code> 重新开始关卡</li>
<li><code>levels</code> 重新选择关卡</li>
<li><code>show solution</code> 显示答案</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>网摘</title>
    <url>/2019/05/10/other-001/</url>
    <content><![CDATA[<h2 id="码农"><a href="#码农" class="headerlink" title="码农"></a>码农</h2><p>前几天，我听一个广播节目。主持人问，现在很多人开网约车，这样能赚多少钱，能够赚到大钱吗？</p>
<a id="more"></a>
<p>这个问题很容易回答，答案就是不能。出租车司机的收入，主要由营业时间的长短决定。基本上，一天开12个小时，就是比开6个小时，收入高出一倍。每天只有24个小时，因此收入存在上限，不可能偏离平均水平很远。</p>
<p>出租车是“时间换收入”的典型行业，投入的时间越多，收入越高，在家休息就没收入。很多行业都属于“时间换收入”，所有此类行业都赚不到大钱。因为你能用来交换的时间是有限的，而且进入中年以后，你就拿不出更多的时间来交换。开出租车赚零花钱，或者作为短期过渡，这是没问题的，但作为终身职业是很糟糕的。</p>
<p>我觉得，越来越多的程序员正在落入这个陷井，用编码的时间换取收入。只有不停地做项目，才能拿到钱。项目做得越多，收入越高。这个项目开发完了，公司又让他去干下一个项目。 忙了好几年，项目完成了一大堆，但是自己什么也没留下，以后的收入还要取决于从零开始的新项目。这样的话，你跟出租车司机有何两样，哪一天你不写代码了，不是照样没收入。</p>
<p>那些赚到大钱的人，没有一个是靠时间换取收入的。他们要么通过积累资产致富，要么购买他人的时间，为自己创造财富。你应该警惕，不要落入“时间换取收入”的陷井，不要只顾着为别人生产代码，而要注意积累自己的资产，以及适时开展属于自己的业务。</p>
]]></content>
      <categories>
        <category>excerpt</category>
      </categories>
      <tags>
        <tag>excerpt</tag>
      </tags>
  </entry>
  <entry>
    <title>localStorage &amp;&amp; sessionStorage</title>
    <url>/2019/05/05/js-learn-003/</url>
    <content><![CDATA[<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> storage = localStorage <span class="comment">// or sessionStorage</span></span><br><span class="line"><span class="comment">// 增 改</span></span><br><span class="line">storage.setItem(<span class="string">'version'</span>, <span class="string">'0.2.0'</span>)</span><br><span class="line"><span class="comment">// 查</span></span><br><span class="line">storage.getItem(<span class="string">'version'</span>)</span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">storage.removeItem(<span class="string">'version'</span>)</span><br><span class="line"><span class="comment">// 删</span></span><br><span class="line">storage.clear()</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="noopener">MDN web docs – Window​.local​Storage</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noopener">MDN web docs – Window​.session​Storage</a><br><a href="https://www.cnblogs.com/st-leslie/p/5617130.html" target="_blank" rel="noopener">localStorage使用总结</a></p>
]]></content>
      <categories>
        <category>h5</category>
      </categories>
      <tags>
        <tag>h5</tag>
      </tags>
  </entry>
  <entry>
    <title>魔术字符串</title>
    <url>/2019/05/05/js-learn-004/</url>
    <content><![CDATA[<h2 id="魔术字符串"><a href="#魔术字符串" class="headerlink" title="魔术字符串"></a>魔术字符串</h2><p>在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。</p>
]]></content>
      <categories>
        <category>h5</category>
      </categories>
      <tags>
        <tag>h5</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript</title>
    <url>/2019/04/08/typescript-learn-001/</url>
    <content><![CDATA[<h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><blockquote>
<p>TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="string">"Jane User"</span>;</span><br><span class="line">greeter(user);</span><br></pre></td></tr></table></figure>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>interface<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    fullName: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> firstName: <span class="built_in">string</span>, <span class="keyword">public</span> middleInitial: <span class="built_in">string</span>, <span class="keyword">public</span> lastName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + middleInitial + <span class="string">" "</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    firstName: <span class="built_in">string</span>;</span><br><span class="line">    lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person : Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> Student(<span class="string">"Jane"</span>, <span class="string">"M."</span>, <span class="string">"User"</span>);</span><br><span class="line">greeter(user);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>typescript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript · String</title>
    <url>/2019/01/02/js-learn-002/</url>
    <content><![CDATA[<p><strong>ES5 String API</strong><br><strong>ES6 String API</strong></p>
<a id="more"></a>
<h3 id="ES5-String-API"><a href="#ES5-String-API" class="headerlink" title="ES5 String API"></a>ES5 String API</h3><ol>
<li>sub()</li>
<li>sup()</li>
<li>big()</li>
<li>small()</li>
<li>strike()</li>
<li>bold()</li>
<li>italics()</li>
<li>blink()</li>
<li>link()</li>
<li>anchor()</li>
<li>fixed()</li>
<li>fontsize()</li>
<li>fontcolor()</li>
<li>charAt()</li>
<li>charCodeAt()</li>
<li>fromCharCode()</li>
<li>indexOf()</li>
<li>lastIndexOf()</li>
<li>match()</li>
<li>replace()</li>
<li>search()</li>
<li>localCompare()</li>
<li>split()</li>
<li>concat()</li>
<li>substr(start, length)</li>
<li>substring(start, end)</li>
<li>slice(start, end) 接收负参数</li>
<li>toLocaleLowerCase()</li>
<li>toLocaleUpperCase()</li>
<li>toLowerCase()</li>
<li>toUpperCase()</li>
<li>toSource()</li>
<li>toString()</li>
<li>valueOf()</li>
</ol>
<blockquote>
<p><a href="http://www.w3school.com.cn/jsref/jsref_obj_string.asp" target="_blank" rel="noopener">参考文档</a></p>
</blockquote>
<hr>
<h3 id="ES6-String-API"><a href="#ES6-String-API" class="headerlink" title="ES6 String API"></a>ES6 String API</h3><ol>
<li>字符串的Unicode表示法</li>
<li>codePointAt() &amp;&amp; charCodeAt()</li>
<li>fromCodePoint() &amp;&amp; fromCharCode()</li>
<li>for…of遍历</li>
<li>normalize()</li>
<li>includes()</li>
<li>startWith()</li>
<li>endsWith()</li>
<li>repeat()</li>
<li>padStart()</li>
<li>padEnd()</li>
<li>matchAll()</li>
<li>模板字符串 ``</li>
<li>String.raw()</li>
</ol>
<blockquote>
<p><a href="http://es6.ruanyifeng.com/#docs/string" target="_blank" rel="noopener">参考文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript · Array</title>
    <url>/2019/01/02/js-learn-001/</url>
    <content><![CDATA[<p><strong>ES5 Array API</strong><br><strong>ES6 Array API</strong><br><strong>JS Array 遍历</strong><br><strong>参考文档</strong></p>
<a id="more"></a>
<h3 id="ES5-Array-API"><a href="#ES5-Array-API" class="headerlink" title="ES5 Array API"></a>ES5 Array API</h3><ol>
<li>concat(p1[array or number], p2…)</li>
<li>join(separator)</li>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>reverse()</li>
<li>slice(start, end)</li>
<li>splice(start, number, item1,…,itemx)</li>
<li>sort(sortBy)</li>
<li>toSource()</li>
<li>toString()</li>
<li>toLocaleString()</li>
<li>valueOf()</li>
</ol>
<h3 id="ES6-Array-API"><a href="#ES6-Array-API" class="headerlink" title="ES6 Array API"></a>ES6 Array API</h3><ol>
<li>扩展云算符 …</li>
<li>Array.from()</li>
<li>Array.of()</li>
<li>copyWithin(target, start = 0, end = this.length)</li>
<li>find()</li>
<li>findIndex()</li>
<li>fill()</li>
<li>keys()</li>
<li>values()</li>
<li>entries()</li>
<li>includes()</li>
<li>flat()</li>
<li>flatMap()</li>
</ol>
<h3 id="JS-Array-遍历"><a href="#JS-Array-遍历" class="headerlink" title="JS Array 遍历"></a>JS Array 遍历</h3><ol>
<li>for…in</li>
<li>for…of</li>
<li>forEach()</li>
<li>reduce()</li>
<li>map()</li>
<li>flatMap()</li>
<li>find() 返回符合条件的第一个子元素</li>
<li>findIndex()</li>
<li>filter() 返回包含所有符合条件的子元素的数组</li>
<li>every()</li>
<li>some()</li>
<li>keys()</li>
<li>values()</li>
<li>entries()</li>
</ol>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp" target="_blank" rel="noopener">ES5 Array 参考文档</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">ES6 Array 参考文档</a></li>
</ol>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 · Number</title>
    <url>/2018/12/25/es6-learn-007/</url>
    <content><![CDATA[<p><strong>Number</strong></p>
<a id="more"></a>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul>
<li>0b11 //3</li>
<li>0B11 //3</li>
<li>0o11 //9</li>
<li>0O11 //9</li>
<li>toSting([2, 8, 10, 16]) //转为二进制、八进制、十进制、十六进制字符串</li>
<li>Number(0b11) //转十进制</li>
<li>Number.isFinate() </li>
<li>Number.isNaN()</li>
<li>Number.parseInt()</li>
<li>Number.parseFloat()</li>
<li>Number.isInteger() //由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，Number.isInteger可能会误判。</li>
<li>Number.EPSILON === Math.pow(2, -52) //表示 1 与大于 1 的最小浮点数之间的差。</li>
<li>Number.MAX_SAFE_INTEGER === Math.pow(2, 53)</li>
<li>Number.MIN_SAFE_INTEGER === Math.pow(2, -53)</li>
<li><p>Number.isSafeInteger(n) //Number.MIN_SAFE_INTEGER &lt; n &lt; Number.MAX_SAFE_INTEGER</p>
</li>
<li><p>Math.trunc(3.14) //3 返回整数部分</p>
</li>
<li>Math.sign()</li>
<li>Math.cbrt() //返回立方根</li>
<li>Math.hypot() //返回参数平方和的平方根</li>
</ul>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>number</tag>
      </tags>
  </entry>
  <entry>
    <title>博客计划 · 2019年</title>
    <url>/2018/12/25/plan-blog-2019/</url>
    <content><![CDATA[<p><strong>博客计划 · 2019年</strong></p>
<a id="more"></a>
<ul>
<li style="list-style: none"><input type="checkbox"> <code>es6</code></li>
<li style="list-style: none"><input type="checkbox"> <code>vue</code></li>
<li style="list-style: none"><input type="checkbox"> <code>nodejs</code></li>
<li style="list-style: none"><input type="checkbox"> <code>webpack</code></li>
<li style="list-style: none"><input type="checkbox"> <code>vscode</code></li>
<li style="list-style: none"><input type="checkbox"> <code>nodejs</code></li>
</ul>
]]></content>
      <categories>
        <category>plan</category>
      </categories>
      <tags>
        <tag>plan-blod</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS · Flex</title>
    <url>/2018/12/06/web-learn-001/</url>
    <content><![CDATA[<p><strong>CSS · Flex</strong></p>
<a id="more"></a>
<table>
<thead>
<tr>
<th><code>main axis</code> 主轴</th>
<th><code>cross axis</code> 交叉轴</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>main start</code> 主轴起点</td>
<td><code>cross start</code> 交叉轴起点</td>
</tr>
<tr>
<td><code>main end</code> 主轴终点</td>
<td><code>cross end</code> 交叉轴终点</td>
</tr>
<tr>
<td><code>main size</code> 主轴方向大小</td>
<td><code>cross size</code> 交叉轴方向大小</td>
</tr>
</tbody>
</table>
<h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><p><code>display: flex</code></p>
<ul>
<li>指定flex布局，此时<code>float</code>、<code>clear</code>、<code>vertical-align</code>属性将失效</li>
</ul>
<p><code>flex-direction</code> 主轴方向</p>
<ul>
<li><code>row</code> 默认 主轴为水平方向，起点在左端</li>
<li><code>row-reverse</code> 主轴为水平方向，起点在右端</li>
<li><code>column</code> 主轴为垂直方向，起点在上端</li>
<li><code>column-reverse</code> 主轴为垂直方向，起点在下端</li>
</ul>
<p><code>flex-wrap</code> 是否换行</p>
<ul>
<li><code>nowrap</code> 默认 不换行</li>
<li><code>wrap</code> 换行</li>
<li><code>wrap-reverse</code> 反向换行</li>
</ul>
<p><code>flex-flow</code> 主轴方向和是否换行</p>
<ul>
<li><code>row nowrap</code> 默认</li>
<li><code>flex-direction</code> 和 <code>flex-wrap</code> 的缩写</li>
</ul>
<p><code>justify-content</code> 主轴对齐方式</p>
<ul>
<li><code>flex-start</code> 默认 主轴起点对齐</li>
<li><code>flex-end</code> 主轴终点对齐</li>
<li><code>center</code> 主轴居中对齐</li>
<li><code>space-between</code> 主轴两端对齐</li>
<li><code>space-around</code> 间隔相等</li>
</ul>
<p><code>align-items</code> 交叉轴对齐方式</p>
<ul>
<li><code>stretch</code> 默认 拉伸 如果未设置高度或设置为auto，将占满整个高度</li>
<li><code>flex-start</code> 交叉轴起点对齐</li>
<li><code>flex-end</code> 交叉轴终点对齐</li>
<li><code>center</code> 交叉轴居中对齐</li>
<li><code>baseline</code> 第一行文字的基线对齐</li>
</ul>
<p><code>align-content</code> 多根轴线的对齐方式，一根轴线时不生效</p>
<ul>
<li><code>stretch</code> 默认 拉伸 占满整个交叉轴</li>
<li><code>flex-start</code> 与交叉轴的起点对齐</li>
<li><code>flex-end</code> 与交叉轴的终点对齐</li>
<li><code>center</code> 与交叉轴的中点对齐</li>
<li><code>space-between</code> 交叉轴两端对齐</li>
<li><code>space-around</code> 间隔相等</li>
</ul>
<h3 id="子项属性"><a href="#子项属性" class="headerlink" title="子项属性"></a>子项属性</h3><p><code>order</code></p>
<ul>
<li>0 默认</li>
<li>子项的排列顺序，数字越小越靠前</li>
</ul>
<p><code>flex-grow</code></p>
<ul>
<li>子项放大比例</li>
<li>0 默认 不放大</li>
</ul>
<p><code>flex-shrink</code></p>
<ul>
<li>子项缩小比例</li>
<li>1 默认</li>
<li>0 不缩小</li>
</ul>
<p><code>flex-basis</code></p>
<ul>
<li>在分配多余空间之前，子项占据的主轴空间(main size)</li>
<li>auto 默认</li>
</ul>
<p><code>flex</code></p>
<ul>
<li><code>flex-grow</code> <code>flex-shrink</code> <code>flex-basis</code>的简写</li>
<li><code>0 1 auto</code> 默认</li>
</ul>
<p><code>align-self</code></p>
<ul>
<li>子项对齐方式，覆盖<code>align-items</code></li>
<li>auto 默认 继承父元素的<code>align-items</code></li>
</ul>
<h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><p><img src="/images/holy_grail_layout.png" alt="img"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .container &#123;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      flex-flow: column nowrap;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .header,</span></span><br><span class="line"><span class="undefined">    .footer &#123;</span></span><br><span class="line"><span class="undefined">      background: #eee;</span></span><br><span class="line"><span class="undefined">      flex: 0 0 56px;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      line-height: 56px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .main &#123;</span></span><br><span class="line"><span class="undefined">      height: 400px;</span></span><br><span class="line"><span class="undefined">      background: #ddd;</span></span><br><span class="line"><span class="undefined">      display: flex;</span></span><br><span class="line"><span class="undefined">      line-height: 400px;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .left &#123;</span></span><br><span class="line"><span class="undefined">      flex: 0 0 160px;</span></span><br><span class="line"><span class="undefined">      background: #ccc;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .center &#123;</span></span><br><span class="line"><span class="undefined">      flex: 1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .right &#123;</span></span><br><span class="line"><span class="undefined">      flex: 0 0 160px;</span></span><br><span class="line"><span class="undefined">      background: #bbb;</span></span><br><span class="line"><span class="undefined">      align-self: flex-end;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>LEFT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>CENTER<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>RIGHT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 · Reflect</title>
    <url>/2018/12/04/es6-learn-006/</url>
    <content><![CDATA[<p>Reflect.get()<br>Reflect.set()<br>Reflect.has()<br>Reflect.deleteProperty()<br>Reflect.construct()<br>Reflect.getPrototypeOf()<br>Reflect.setPrototypeOf()<br>Reflect.apply()<br>Reflect.defineProperty()<br>Reflect.getOwnPropertyDescriptor()<br>Reflect.isExtensible()<br>Reflect.preventExtensions()<br>Reflect.ownKeys()</p>
<a id="more"></a>
<h3 id="Reflect-get-target-name-receiver"><a href="#Reflect-get-target-name-receiver" class="headerlink" title="Reflect.get(target, name, receiver)"></a>Reflect.get(target, name, receiver)</h3><p>查找并返回target.name<br>如果name属性部署了getter，getter的this绑定receiver</p>
<h3 id="Reflect-set-target-name-value-receiver"><a href="#Reflect-set-target-name-value-receiver" class="headerlink" title="Reflect.set(target, name, value, receiver)"></a>Reflect.set(target, name, value, receiver)</h3><p>设置target的name属性值为value<br>如果name属性部署了setter，setter的this绑定receiver</p>
<h3 id="Reflect-has-obj-name"><a href="#Reflect-has-obj-name" class="headerlink" title="Reflect.has(obj, name)"></a>Reflect.has(obj, name)</h3><p>等同于 name in obj</p>
<h3 id="Reflect-deleteProperty-obj-name"><a href="#Reflect-deleteProperty-obj-name" class="headerlink" title="Reflect.deleteProperty(obj, name)"></a>Reflect.deleteProperty(obj, name)</h3><p>等同于 delete obj.name</p>
<h3 id="Reflect-construct-target-args"><a href="#Reflect-construct-target-args" class="headerlink" title="Reflect.construct(target, args)"></a>Reflect.construct(target, args)</h3><p>等同于 new target(…args)<br>不使用new调用构造函数的方式</p>
<h3 id="Reflect-getPrototypeOf-obj"><a href="#Reflect-getPrototypeOf-obj" class="headerlink" title="Reflect.getPrototypeOf(obj)"></a>Reflect.getPrototypeOf(obj)</h3><p>等同于 Object.getPrototypeOf(obj)<br>读取obj的<strong>proto</strong>属性</p>
<h3 id="Reflect-setPrototypeOf-obj-newProto"><a href="#Reflect-setPrototypeOf-obj-newProto" class="headerlink" title="Reflect.setPrototypeOf(obj, newProto)"></a>Reflect.setPrototypeOf(obj, newProto)</h3><p>等同于 Object.setPrototypeOf(obj, newProto)</p>
<h3 id="Reflect-apply-func-thisArgs-args"><a href="#Reflect-apply-func-thisArgs-args" class="headerlink" title="Reflect.apply(func, thisArgs, args)"></a>Reflect.apply(func, thisArgs, args)</h3><p>等同于 Function.prototype.apply.call(func, thisArgs, args)</p>
<h3 id="Reflect-defineProperty-target-propertyKey-attributies"><a href="#Reflect-defineProperty-target-propertyKey-attributies" class="headerlink" title="Reflect.defineProperty(target, propertyKey, attributies)"></a>Reflect.defineProperty(target, propertyKey, attributies)</h3><p>等同于 Object.defineProperty(target, propertyKey, attiruties)</p>
<h3 id="Reflect-getOwnPropertyDescriptor-target-propertyKey"><a href="#Reflect-getOwnPropertyDescriptor-target-propertyKey" class="headerlink" title="Reflect.getOwnPropertyDescriptor(target, propertyKey)"></a>Reflect.getOwnPropertyDescriptor(target, propertyKey)</h3><p>等同于 Object.getOwnPropertyDescriptor(target, propertyKey)</p>
<h3 id="Reflect-isExtensible-target"><a href="#Reflect-isExtensible-target" class="headerlink" title="Reflect.isExtensible(target)"></a>Reflect.isExtensible(target)</h3><p>等同于 Object.isExtensible(target)<br>target是否可扩展，返回布尔值</p>
<h3 id="Reflect-preventExtensible-target"><a href="#Reflect-preventExtensible-target" class="headerlink" title="Reflect.preventExtensible(target)"></a>Reflect.preventExtensible(target)</h3><p>等同于 Object.preventExtensible(target)<br>让target不可扩展</p>
<h3 id="Reflect-ownKeys-target"><a href="#Reflect-ownKeys-target" class="headerlink" title="Reflect.ownKeys(target)"></a>Reflect.ownKeys(target)</h3><p>等同于 Object.ownKeys(target)<br>返回一个对象的所有属性<br>Object.getOwnPropertyNames + Object.getOwnPropertySymbols</p>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6-reflect</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 · Class继承</title>
    <url>/2018/11/30/es6-learn-005/</url>
    <content><![CDATA[<p><strong>ES6 · Class继承</strong></p>
<a id="more"></a>
<p>参考文档：<a href="http://es6.ruanyifeng.com/#docs/class-extends" target="_blank" rel="noopener">阮一峰 ECMAScript 6 入门 – Class的继承</a></p>
<h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorLine</span> <span class="keyword">extends</span> <span class="title">Line</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>子类必须在constructor方法中调用super方法<br>如果子类没有constructor方法，constructor会被默认添加<br>在constructor方法中，只有调用super方法后，才能使用this<br>可继承原生构造函数(String/Number/Boolean/Array/Date/Error/Regexp/Function/Object)</p>
<h3 id="Object-getPrototypeOf-amp-amp-Reflect-getPrototypeOf"><a href="#Object-getPrototypeOf-amp-amp-Reflect-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf() &amp;&amp; Reflect.getPrototypeOf()"></a>Object.getPrototypeOf() &amp;&amp; Reflect.getPrototypeOf()</h3><p>判断一个类是否继承自另一个类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(ColorLine) === Line <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Reflect</span>.getPrototypeOf(ColorLine) === Line <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>每个对象都有一个名为<strong>proto</strong>的属性</li>
<li>每个构造函数都有一个名为prototype的方法</li>
<li>每个对象的<strong>proto</strong>指向自身构造函数的prototype</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(length) &#123;</span><br><span class="line">    <span class="keyword">this</span>.length = length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> line = <span class="keyword">new</span> Line(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(line.__proto__ === Line.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(line.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(line.__proto__.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// null &lt;= Object &lt;= Line &lt;= line</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Line.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Line.__proto__.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Line.__proto__.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// null &lt;= Object &lt;= Function &lt;= Line</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.__proto__); <span class="comment">//true</span></span><br><span class="line"><span class="comment">// Function &lt;= Object</span></span><br><span class="line"><span class="comment">// Function &lt;= Function</span></span><br></pre></td></tr></table></figure>
<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul>
<li>作为函数 <code>super()</code><br>只能在子类的constructor方法中调用<br>子类constructor方法中必须调用一次super方法</li>
<li>用作对象<br>普通方法中，指向父类的原型对象<br>静态方法中，指向父类</li>
</ul>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6-class</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 · Class基础</title>
    <url>/2018/11/30/es6-learn-004/</url>
    <content><![CDATA[<p><strong>ES6 · Class基础</strong></p>
<a id="more"></a>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> Rectangle (width, height) &#123;</span><br><span class="line">  this.width = width;</span><br><span class="line">  this.height = height;</span><br><span class="line">&#125;</span><br><span class="line">Rectangle.prototype.getArea = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> this.width * this.height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const square = new Rectangle(4, 4);</span><br><span class="line">square.width //4</span><br><span class="line">square.height //4</span><br><span class="line">square.getArea() //16</span><br></pre></td></tr></table></figure>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">class Rectangle &#123;</span><br><span class="line">  constructor(width, height) &#123;</span><br><span class="line">    this.width = width;</span><br><span class="line">    this.height = height;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getArea</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this.width * this.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const square = new Rectangle(4, 4);</span><br><span class="line">square.width //4</span><br><span class="line">square.height //4</span><br><span class="line">square.getArea() //16</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>constructor</code><br>类的构造函数，实例化(new)时自动调用</p>
</li>
<li><p><code>static</code><br>静态方法<br>类可以调用，会被子类继承，子类也可以调用<br>不会被类的实例继承，类的实例无法调用<br>也不会被子类的实例继承，子类的实例也无法调用<br>this指向类，而不是实例</p>
</li>
<li><p><code>name</code><br>返回类的名称</p>
</li>
<li><p><code>new.target</code><br>返回实例化时调用的类<br>子类继承父类时，会返回子类</p>
</li>
</ul>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul>
<li>类的所有方法都在原型上</li>
<li>类内部的方法，都是不可枚举的</li>
<li>类的属性名和方法名可以用表达式</li>
<li>类的内部默认启用严格模式</li>
<li>类不存在变量提升</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote>
<p>实例的属性，除非定义在this对象上，否则都定义在原型上<br>类的所有实例共享一个原型对象</p>
</blockquote>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6-class</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM · 小结03</title>
    <url>/2018/11/29/vim-study-003/</url>
    <content><![CDATA[<p><strong>VIM · 小结03</strong></p>
<a id="more"></a>
<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul>
<li><code>expandtab</code> 是否将tab转化为空格</li>
<li><code>shfitwidth</code> &gt;&gt;或&lt;&lt;时缩进的列数</li>
<li><code>tabstop</code> 一个tab键所占的列数</li>
<li><code>softtabstop</code> tab实际占的列数</li>
<li><code>autoindent(ai)</code> 自动换行<figure class="highlight bash"><figcaption><span>.vimrc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> softtabstop=4</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对应简写</span></span><br><span class="line"><span class="built_in">set</span> ai</span><br><span class="line"><span class="built_in">set</span> et</span><br><span class="line"><span class="built_in">set</span> sw=4</span><br><span class="line"><span class="built_in">set</span> ts=4</span><br><span class="line"><span class="built_in">set</span> sts=4</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim-study</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM · 小结02</title>
    <url>/2018/11/28/vim-study-002/</url>
    <content><![CDATA[<p><strong>VIM · 小结02</strong></p>
<a id="more"></a>
<h3 id="进入普通模式-Normal-mode"><a href="#进入普通模式-Normal-mode" class="headerlink" title="进入普通模式(Normal mode)"></a>进入普通模式(Normal mode)</h3><ul>
<li><code>Esc</code></li>
<li><code>CTRL + [</code></li>
</ul>
<h3 id="进入命令模式-Commant-line-mode"><a href="#进入命令模式-Commant-line-mode" class="headerlink" title="进入命令模式(Commant line mode)"></a>进入命令模式(Commant line mode)</h3><ul>
<li><code>:</code></li>
</ul>
<h3 id="进入插入模式-Insert-mode"><a href="#进入插入模式-Insert-mode" class="headerlink" title="进入插入模式(Insert mode)"></a>进入插入模式(Insert mode)</h3><ul>
<li><code>i</code> 在光标前插入</li>
<li><code>I</code> 在行首插入</li>
<li><code>a</code> 在光标后插入</li>
<li><code>A</code> 在行尾插入</li>
<li><code>o</code> 在下方插入一行</li>
<li><code>O</code> 在上方插入一行</li>
</ul>
<h3 id="进入可视模式-Visual-mode"><a href="#进入可视模式-Visual-mode" class="headerlink" title="进入可视模式(Visual mode)"></a>进入可视模式(Visual mode)</h3><ul>
<li><code>v</code></li>
</ul>
<h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><ul>
<li><code>q</code></li>
<li><code>ZZ</code></li>
</ul>
<h3 id="常用命令一览"><a href="#常用命令一览" class="headerlink" title="常用命令一览"></a>常用命令一览</h3><table>
<thead>
<tr>
<th>模式</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>正常模式</td>
<td><code>b</code></td>
<td>跳转到前一个单词的开头</td>
</tr>
<tr>
<td>正常模式</td>
<td><code>ge</code></td>
<td>跳转到前一个单词的结尾</td>
</tr>
<tr>
<td>正常模式</td>
<td><code>f&lt;字母&gt;</code></td>
<td>向后搜索字母，并跳转到第一个匹配的位置</td>
</tr>
<tr>
<td>正常模式</td>
<td><code>F&lt;字母&gt;</code></td>
<td>向前搜索字母，并跳转到第一个匹配的位置</td>
</tr>
</tbody>
</table>
<h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><ul>
<li><code>yy</code></li>
<li><code>y0</code></li>
<li><code>y^</code></li>
<li><code>y$</code></li>
<li><code>yw</code></li>
<li><code>yG</code></li>
<li><code>y1G</code></li>
</ul>
<h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><ul>
<li><code>p</code></li>
<li><code>P</code></li>
</ul>
<h3 id="change"><a href="#change" class="headerlink" title="change"></a>change</h3><ul>
<li>c [number] motion<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3></li>
<li>d [number] motion</li>
</ul>
<h3 id="上下行交换"><a href="#上下行交换" class="headerlink" title="上下行交换"></a>上下行交换</h3><ul>
<li><code>ddp</code></li>
</ul>
<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><ul>
<li><code>r</code> 替换当前光标位置</li>
<li><code>R</code> 连续替换</li>
<li><code>cc</code> 替换当前行</li>
<li><code>cw</code> 替换一个单词</li>
<li><code>C</code> 替换到行尾</li>
<li><code>~</code> 反转大小写</li>
<li><code>u</code> 撤销一次</li>
<li><code>U</code> 撤销当前行的所有更改</li>
<li><code>Ctrl + r</code> 取消撤销</li>
<li><code>:s/old/new/g</code> 替换当前行所有的old为new</li>
<li><code>:#,#s/old/new/g</code> 替换#行到#行的所有的old为new</li>
<li><code>:%s/old/new/g</code> 替换整个文档所有的old为new</li>
</ul>
<h3 id="提取内容"><a href="#提取内容" class="headerlink" title="提取内容"></a>提取内容</h3><ul>
<li><code>:r file</code> 提取file文件内容，插入光标所在位置</li>
<li><code>:r !ls</code> 提取ls命令输入内容，插入光标所在位置</li>
</ul>
<h3 id="文本位置"><a href="#文本位置" class="headerlink" title="文本位置"></a>文本位置</h3><ul>
<li><code>ce</code> 居中</li>
<li><code>ri</code> 居右</li>
<li><code>le</code> 居左</li>
</ul>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul>
<li><code>?&lt;单词&gt;</code> 向上查找word</li>
<li><code>/&lt;单词&gt;</code> 向下查找word</li>
<li><code>n</code> 下一个</li>
<li><code>N</code> 上一个</li>
<li><code>CTRL + O</code> 回到较旧的位置</li>
<li><code>CTRL + I9j</code> 回到较新的位置</li>
<li><code>\*</code> 向下查找光标所在单词</li>
<li><code>\#</code> 向上查找鼠标所在单词</li>
<li><code>%</code> 查找配对括号</li>
</ul>
<h3 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h3><ul>
<li><code>vim 1.txt 2.txt</code> 同时打开两个文件</li>
<li><code>:n</code> 编辑下一个文件</li>
<li><code>:N</code> 编辑上一个文件</li>
<li><code>:e 3.txt</code> 打开3.txt</li>
<li><code>:e#</code> 回到前一个文件</li>
<li><code>:ls</code> 列出已打开的文件</li>
<li><code>:b 2.txt</code> 编辑2.txt</li>
<li><code>:bd 2.txt</code> 删除已打开的文件列表中的2.txt</li>
<li><code>e! 4.txt</code> 强制打开4.txt</li>
<li><code>:f</code> 显示正在编辑的文件名</li>
<li><code>:f 5.txt</code> 另存为5.txt</li>
</ul>
<h3 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h3><ul>
<li><code>vim -r filename</code></li>
</ul>
<h3 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h3><ul>
<li><code>v</code> 字符选择</li>
<li><code>Shift + v</code> 行选择</li>
<li><code>Ctrl + v</code> 区域选择</li>
</ul>
<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul>
<li><code>&gt;&gt;</code> 向右缩进</li>
<li><code>&lt;&lt;</code> 向左缩进</li>
</ul>
<h3 id="视窗操作"><a href="#视窗操作" class="headerlink" title="视窗操作"></a>视窗操作</h3><ul>
<li><code>:new</code> 水平分屏</li>
<li><code>:sp</code> 水平分屏</li>
<li><code>:vsp</code> 垂直分屏</li>
<li><code>Ctrl + w s</code> 水平分屏</li>
<li><code>Ctrl + w v</code> 垂直分屏</li>
<li><code>Ctrl + w q</code> 关闭当前分屏</li>
<li><code>Ctrl + w o</code> 打开新视窗，并隐藏之前的所有视窗</li>
<li><code>Ctrl + w h</code> 切换到左侧分屏</li>
<li><code>Ctrl + w j</code> 切换到下面分屏</li>
<li><code>Ctrl + w k</code> 切换到上面分屏</li>
<li><code>Ctrl + w l</code> 切换到下册分屏</li>
<li><code>Ctrl + w H</code> 移动视窗到左侧</li>
<li><code>Ctrl + w J</code> 移动视窗值下面</li>
<li><code>Ctrl + w K</code> 移动视窗至上面</li>
<li><code>Ctrl + w L</code> 移动视窗至右侧</li>
<li><code>Ctrl + w -</code> 减小视窗高度</li>
<li><code>Ctrl + w +</code> 增加视窗高度</li>
</ul>
<h3 id="文档加密"><a href="#文档加密" class="headerlink" title="文档加密"></a>文档加密</h3><ul>
<li><code>vim -x file</code></li>
</ul>
<h3 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h3><ul>
<li><code>:!ls</code> 暂时退出vim并执行ls命令</li>
</ul>
<h3 id="选择性保存"><a href="#选择性保存" class="headerlink" title="选择性保存"></a>选择性保存</h3><ul>
<li><code>v</code> 进入可视模式</li>
<li><code>{move cursor}</code> 移动光标选择文本</li>
<li><code>:w</code> 保存</li>
</ul>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ul>
<li><code>:set</code> 显示所有修改过的配置</li>
<li><code>:set all</code> 显示所有的设定值</li>
<li><code>:set option?</code> 显示option的设定值</li>
<li><code>:set nooption</code> 取消当前设定值</li>
<li><code>:set autoindent(ai)</code> 设置自动缩进</li>
<li><code>:set autowrite(aw)</code> 设置自动保存，默认未打开</li>
<li><code>:set background=dark</code> 设置背景风格</li>
<li><code>:set backup(bk)</code> 设置自动备份，默认未打开</li>
<li><code>:set hlsearch(hls)</code> 高亮搜索匹配项</li>
</ul>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim-study</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 · Module</title>
    <url>/2018/11/26/es6-learn-003/</url>
    <content><![CDATA[<p><strong>ES6 · Module</strong></p>
<a id="more"></a>
<p>CommonJS</p>
<ul>
<li>运行时加载，在运行到的时候才能确定依赖关系，输出的是值的缓存，不能动态更新</li>
</ul>
<p>ES6</p>
<ul>
<li>编译时加载，编译时即可确定依赖关系，效率更高，输出的是值的引用，可以做静态优化，输出会动态更新</li>
</ul>
<p>ES6模块自动启用严格模式，严格模式下：</p>
<ul>
<li>变量必须声明后再使用</li>
<li>函数的参数不能有同名属性，否则报错</li>
<li>不能使用with语句</li>
<li>不能对只读属性赋值，否则报错</li>
<li>不能使用前缀 0 表示八进制数，否则报错</li>
<li>不能删除不可删除的属性，否则报错</li>
<li>不能删除变量delete prop，会报错，只能删除属性delete global[prop]</li>
<li>eval不会在它的外层作用域引入变量</li>
<li>eval和arguments不能被重新赋值</li>
<li>arguments不会自动反映函数参数的变化</li>
<li>不能使用arguments.callee</li>
<li>不能使用arguments.caller</li>
<li>禁止this指向全局对象，顶层的this指向undefined</li>
<li>不能使用fn.caller和fn.arguments获取函数调用的堆栈</li>
<li>增加了保留字（比如protected、static和interface）</li>
</ul>
<blockquote>
<p>export命令用于规定模块的对外接口<br>import命令用于输入其他模块提供的功能<br>as 重命名<br>default 指定默认输出<br>* 代表模块所有内容</p>
</blockquote>
<hr>
<p><strong>一般用法</strong><br><figure class="highlight js"><figcaption><span>module.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'module'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>使用default指定默认输出</strong><br><figure class="highlight js"><figcaption><span>module.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'module'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> name;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">'./module'</span>; <span class="comment">// name可以是任何合法变量名</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>使用 * 整体加载，使用as改名</strong><br><figure class="highlight js"><figcaption><span>module.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'module'</span>;</span><br><span class="line"><span class="keyword">let</span> version = <span class="string">'1.0.0'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name, version &#125;;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>模块继承</strong><br><figure class="highlight js"><figcaption><span>utils.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'utils'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;name&#125;;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><figcaption><span>tools.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./utils'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> version = <span class="string">'1.0.0'</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> tools <span class="keyword">from</span> <span class="string">'./tools'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(tools.name, tools.version);</span><br><span class="line"><span class="comment">// utils 1.0.0</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>浏览器加载ES6模块</strong><br><code>&lt;script&gt;</code>标签加入<code>type=&quot;module&quot;</code>属性表示是ES6模块<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/myModule.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/myModule.js"</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>加载方式</th>
<th>执行时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>defer</td>
<td>异步加载</td>
<td>渲染完再执行</td>
</tr>
<tr>
<td>async</td>
<td>异步加载</td>
<td>下载完就执行</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./foo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等同于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">src</span>=<span class="string">"./foo.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6-module</tag>
      </tags>
  </entry>
  <entry>
    <title>SFTP · 简易教程及示例</title>
    <url>/2018/11/23/linux-learn-002/</url>
    <content><![CDATA[<p><strong>SFTP · 简易教程及示例</strong></p>
<a id="more"></a>
<ul>
<li><p>sftp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sftp</span></span><br><span class="line">usage: sftp [-1246aCfpqrv] [-B buffer_size] [-b batchfile] [-c cipher]</span><br><span class="line">          [-D sftp_server_path] [-F ssh_config] [-i identity_file] [-l <span class="built_in">limit</span>]</span><br><span class="line">          [-o ssh_option] [-P port] [-R num_requests] [-S program]</span><br><span class="line">          [-s subsystem | sftp_server] host</span><br><span class="line">       sftp [user@]host[:file ...]</span><br><span class="line">       sftp [user@]host[:dir[/]]</span><br><span class="line">       sftp -b batchfile [user@]host</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接sftp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sftp root@host</span></span><br><span class="line">The authenticity of host <span class="string">'host (192.168.16.128)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:t5KwBH+CBk7Emp24FI73Jr4IzVkD9VEUG9XIu86CvsE.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:3c:31:c4:06:8a:6a:a6:4d:9a:21:58:c0:bc:e1:eb:de.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>host,192.168.16.128<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@host'</span>s password: </span><br><span class="line">Connected to host.</span><br><span class="line">sftp&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>help</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp&gt; <span class="built_in">help</span></span><br><span class="line">Available commands:</span><br><span class="line"><span class="built_in">bye</span>                                Quit sftp</span><br><span class="line"><span class="built_in">cd</span> path                            Change remote directory to <span class="string">'path'</span></span><br><span class="line">chgrp grp path                     Change group of file <span class="string">'path'</span> to <span class="string">'grp'</span></span><br><span class="line">chmod mode path                    Change permissions of file <span class="string">'path'</span> to <span class="string">'mode'</span></span><br><span class="line">chown own path                     Change owner of file <span class="string">'path'</span> to <span class="string">'own'</span></span><br><span class="line">df [-hi] [path]                    Display statistics <span class="keyword">for</span> current directory or</span><br><span class="line">                                   filesystem containing <span class="string">'path'</span></span><br><span class="line"><span class="built_in">exit</span>                               Quit sftp</span><br><span class="line">get [-afPpRr] remote [<span class="built_in">local</span>]       Download file</span><br><span class="line">reget [-fPpRr] remote [<span class="built_in">local</span>]      Resume download file</span><br><span class="line">reput [-fPpRr] [<span class="built_in">local</span>] remote      Resume upload file</span><br><span class="line"><span class="built_in">help</span>                               Display this <span class="built_in">help</span> text</span><br><span class="line">lcd path                           Change <span class="built_in">local</span> directory to <span class="string">'path'</span></span><br><span class="line">lls [ls-options [path]]            Display <span class="built_in">local</span> directory listing</span><br><span class="line">lmkdir path                        Create <span class="built_in">local</span> directory</span><br><span class="line">ln [-s] oldpath newpath            Link remote file (-s <span class="keyword">for</span> symlink)</span><br><span class="line">lpwd                               Print <span class="built_in">local</span> working directory</span><br><span class="line">ls [-1afhlnrSt] [path]             Display remote directory listing</span><br><span class="line">lumask <span class="built_in">umask</span>                       Set <span class="built_in">local</span> <span class="built_in">umask</span> to <span class="string">'umask'</span></span><br><span class="line">mkdir path                         Create remote directory</span><br><span class="line">progress                           Toggle display of progress meter</span><br><span class="line">put [-afPpRr] <span class="built_in">local</span> [remote]       Upload file</span><br><span class="line"><span class="built_in">pwd</span>                                Display remote working directory</span><br><span class="line">quit                               Quit sftp</span><br><span class="line">rename oldpath newpath             Rename remote file</span><br><span class="line">rm path                            Delete remote file</span><br><span class="line">rmdir path                         Remove remote directory</span><br><span class="line">symlink oldpath newpath            Symlink remote file</span><br><span class="line">version                            Show SFTP version</span><br><span class="line">!<span class="built_in">command</span>                           Execute <span class="string">'command'</span> <span class="keyword">in</span> <span class="built_in">local</span> shell</span><br><span class="line">!                                  Escape to <span class="built_in">local</span> shell</span><br><span class="line">? 								   Synonym <span class="keyword">for</span> <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>常用命令一览  </p>
</li>
</ul>
<blockquote>
<blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bye</code></td>
<td>退出</td>
</tr>
<tr>
<td><code>quit</code></td>
<td>退出</td>
</tr>
<tr>
<td><code>cd path</code></td>
<td>切换远程目录</td>
</tr>
<tr>
<td><code>lcd path</code></td>
<td>切换本地目录</td>
</tr>
<tr>
<td><code>pwd</code></td>
<td>展示远程当前路径</td>
</tr>
<tr>
<td><code>lpwd</code></td>
<td>展示本地当前路径</td>
</tr>
<tr>
<td><code>ls</code></td>
<td>列出远程目录信息</td>
</tr>
<tr>
<td><code>lls</code></td>
<td>列出本地目录信息</td>
</tr>
<tr>
<td><code>mkdir</code></td>
<td>创建远程目录</td>
</tr>
<tr>
<td><code>lmkdir</code></td>
<td>创建本地目录</td>
</tr>
<tr>
<td><code>progress</code></td>
<td>是否展示进度</td>
</tr>
<tr>
<td><code>put</code></td>
<td>上传</td>
</tr>
<tr>
<td><code>get</code></td>
<td>下载</td>
</tr>
<tr>
<td><code>df</code></td>
<td>查看磁盘信息</td>
</tr>
<tr>
<td><code>!command</code></td>
<td>在本地shell执行命令</td>
</tr>
<tr>
<td><code>!</code></td>
<td>退出到本地shell</td>
</tr>
<tr>
<td><code>help</code></td>
<td>查看帮助信息</td>
</tr>
<tr>
<td><code>?</code></td>
<td>查看帮助信息</td>
</tr>
</tbody>
</table>
</blockquote>
</blockquote>
<ul>
<li>上传下载示例<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp&gt; <span class="built_in">pwd</span></span><br><span class="line">Remote working directory: /root</span><br><span class="line">sftp&gt; lpwd</span><br><span class="line">Local working directory: /c/Users/zhanghao30/Desktop/temp</span><br><span class="line">sftp&gt; ls</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">sftp&gt; lls</span><br><span class="line">note.txt</span><br><span class="line">sftp&gt; put note.txt</span><br><span class="line">Uploading note.txt to /root/note.txt</span><br><span class="line">note.txt                    100% 1781   175.3KB/s   00:00</span><br><span class="line">sftp&gt; get anaconda-ks.cfg</span><br><span class="line">Fetching /root/anaconda-ks.cfg to anaconda-ks.cfg</span><br><span class="line">/root/anaconda-ks.cfg       100% 1421   157.1KB/s   00:00</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>sftp</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM · 小结01</title>
    <url>/2018/11/23/vim-study-001/</url>
    <content><![CDATA[<p><strong>VIM · 小结01</strong></p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>操作</th>
<th>模式</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开</td>
<td>命令行</td>
<td><code>vim</code></td>
<td>打开VIM</td>
</tr>
<tr>
<td>打开</td>
<td>命令行</td>
<td><code>vim [path/to/file]</code></td>
<td>打开file文件，若不存在，则新建file并打开</td>
</tr>
<tr>
<td>打开</td>
<td>VIM正常模式</td>
<td><code>:e [path/to/file]</code></td>
<td>打开file文件，若不存在，则新建file并打开</td>
</tr>
<tr>
<td>保存</td>
<td>VIM正常模式</td>
<td><code>:w</code></td>
<td>保存</td>
</tr>
<tr>
<td>保存</td>
<td>VIM正常模式</td>
<td><code>:w!</code></td>
<td>强制保存</td>
</tr>
<tr>
<td>保存</td>
<td>VIM正常模式</td>
<td><code>:w [path/to/file]</code></td>
<td>保存到file中</td>
</tr>
<tr>
<td>保存</td>
<td>VIM正常模式</td>
<td><code>:w! [path/to/file]</code></td>
<td>强制保存到file中</td>
</tr>
<tr>
<td>保存</td>
<td>VIM正常模式</td>
<td><code>:sav [path/to/file]</code></td>
<td>另存为file</td>
</tr>
<tr>
<td>退出</td>
<td>VIM正常模式</td>
<td><code>:q</code></td>
<td>退出</td>
</tr>
<tr>
<td>退出</td>
<td>VIM正常模式</td>
<td><code>:q!</code></td>
<td>强制退出</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim-study</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM · 基础06</title>
    <url>/2018/11/21/vim-learn-006/</url>
    <content><![CDATA[<p><strong>VIM · 基础06</strong></p>
<a id="more"></a>
<ul>
<li><p>进入插入模式 在光标前插入<br><code>i</code></p>
</li>
<li><p>进入插入模式 在光标所在行首插入<br><code>I</code></p>
</li>
<li><p>进入插入模式 在光标后插入<br><code>a</code></p>
</li>
<li><p>进入插入模式 在光标所在行尾插入<br><code>A</code></p>
</li>
<li><p>在光标下方新建一行，并进入插入模式<br><code>o</code></p>
</li>
<li><p>在光标上方新建一行，并进入插入模式<br><code>O</code></p>
</li>
<li><p>替换模式 连续替换<br><code>R</code></p>
</li>
<li><p>复制<br><code>y</code></p>
</li>
<li><p>粘贴<br><code>p</code></p>
</li>
<li><p>复制粘贴</p>
<ul>
<li><code>v</code> 进入可视模式</li>
<li>移动光标，选择文本</li>
<li><code>y</code> 复制</li>
<li><code>p</code> 粘贴</li>
</ul>
</li>
<li><p>窗口切换<br><code>CTRL + W; CTRL + W</code></p>
</li>
<li><p>自动补全<br><code>CTRL + D</code><br><code>TAB</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim-tutor</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM · 基础05</title>
    <url>/2018/11/21/vim-learn-005/</url>
    <content><![CDATA[<p><strong>VIM · 基础05</strong></p>
<a id="more"></a>
<ul>
<li><p>执行外部命令<br><code>:!ls</code></p>
</li>
<li><p>保存到文件中<br><code>:w [filename]</code></p>
</li>
<li><p>选择性保存</p>
<ul>
<li><code>v</code> 进入可视模式</li>
<li>选择文本</li>
<li><code>:w</code> 保存</li>
</ul>
</li>
<li><p>提取内容<br><code>:r [filename]</code><br><code>:r !tree</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim-tutor</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM · 基础04</title>
    <url>/2018/11/20/vim-learn-004/</url>
    <content><![CDATA[<p><strong>VIM · 基础04</strong></p>
<a id="more"></a>
<ul>
<li><p>显示光标位置和文件状态<br><code>CTRL + g</code></p>
</li>
<li><p>跳转 到最后一行<br><code>G</code></p>
</li>
<li><p>跳转 到第一行<br><code>gg</code></p>
</li>
<li><p>跳转 到指定行<br><code>[number] G</code></p>
</li>
<li><p>向下查找<br><code>/word</code></p>
</li>
<li><p>向上查找<br><code>?word</code></p>
</li>
<li><p>查找下一个<br><code>n</code></p>
</li>
<li><p>查找上一个<br><code>N</code></p>
</li>
<li><p>回到上一个匹配项<br><code>CTRL + o</code></p>
</li>
<li><p>回到下一个匹配项<br><code>CTRL + i</code></p>
</li>
<li><p>查找匹配的括号 () [] {}<br><code>%</code></p>
</li>
<li><p>替换 光标所在行第一个匹配项<br><code>:s/old/new</code></p>
</li>
<li><p>替换 光标所在行所有匹配项<br><code>:s/old/new/g</code></p>
</li>
<li><p>替换 指定行的匹配项<br><code>:#,#s/old/new/g</code>  #,#分别代表起始行和结束行</p>
</li>
<li><p>替换 文件中所有匹配项<br><code>:%s/old/new/g</code></p>
</li>
<li><p>替换 替换时询问<br><code>:s/old/new/gc</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim-tutor</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM · 基础03</title>
    <url>/2018/11/19/vim-learn-003/</url>
    <content><![CDATA[<p><strong>VIM · 基础03</strong></p>
<a id="more"></a>
<ul>
<li><p>粘贴 寄存器内的文本<br><code>p</code></p>
</li>
<li><p>替换 光标所在位置的一个字符<br><code>r</code></p>
</li>
<li><p>更改<br><code>c [number] motion</code></p>
</li>
<li><p>更改 从光标到词尾<br><code>ce</code></p>
</li>
<li><p>更改 从光标到下一个单词的起始<br><code>cw</code></p>
</li>
<li><p>更改 从光标到行尾<br><code>c$</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim-tutor</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM · 基础02</title>
    <url>/2018/11/16/vim-learn-002/</url>
    <content><![CDATA[<p><strong>VIM · 基础02</strong></p>
<a id="more"></a>
<ul>
<li><p>删除（光标所在字符）<br><code>x</code></p>
</li>
<li><p>删除（光标所在前一个字符）<br><code>X</code></p>
</li>
<li><p>删除<br><code>d [number] motion</code></p>
</li>
<li><p>删除 从光标到单词的末尾<br><code>de</code></p>
</li>
<li><p>删除 从光标到下一个单词的开始<br><code>dw</code></p>
</li>
<li><p>删除 从光标到行尾<br><code>d$</code><br><code>D</code></p>
</li>
<li><p>删除 从光标到行首<br><code>d^</code></p>
</li>
<li><p>删除 整行<br><code>dd</code></p>
</li>
<li><p>删除 从当前行到文档结尾处<br><code>dG</code></p>
</li>
<li><p>删除 从当前行到文档开始处<br><code>d1G</code></p>
</li>
<li><p>光标移动到下一个单词的开头<br><code>w</code></p>
</li>
<li><p>光标移动到单词的末尾，如果已经在单词的末尾或空格处，则移动到下一个单词的末尾。<br><code>e</code></p>
</li>
<li><p>光标移动到行首<br><code>0</code><br><code>^</code></p>
</li>
<li><p>光标移动到行尾<br><code>$</code></p>
</li>
<li><p>撤销一步<br><code>u</code></p>
</li>
<li><p>撤销一行<br><code>U</code></p>
</li>
<li><p>取消撤销<br><code>CTRL + R</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim-tutor</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM · 基础01</title>
    <url>/2018/11/16/vim-learn-001/</url>
    <content><![CDATA[<p><strong>VIM · 基础01</strong></p>
<a id="more"></a>
<ul>
<li><p>移动光标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    k上</span><br><span class="line">h左     l右</span><br><span class="line">    j下</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开/创建<br><code>vim filename</code><br><code>:e path/to/file</code></p>
</li>
<li><p>退出（不保存）<br><code>q</code></p>
</li>
<li><p>强制退出（不保存）<br><code>q!</code></p>
</li>
<li><p>保存<br><code>w</code></p>
</li>
<li><p>保存并退出<br><code>wq</code></p>
</li>
<li><p>强制保存并退出<br><code>wq!</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim-tutor</tag>
      </tags>
  </entry>
  <entry>
    <title>Git · 简易教程</title>
    <url>/2018/11/15/git-learn-001/</url>
    <content><![CDATA[<p><strong>1. clone</strong><br><strong>2. branch</strong><br><strong>3. checkout</strong><br><strong>4. status</strong><br><strong>5. add</strong><br><strong>6. commit</strong><br><strong>7. push</strong><br><strong>8. 示例</strong></p>
<a id="more"></a>
<h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><ul>
<li>克隆远程仓库到本地<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> ssh://git@git.moyuqingpen.com.cn:7999/~zhanghao/playground.git</span><br><span class="line">Cloning into <span class="string">'playground'</span>...</span><br><span class="line">remote: 对象计数中: 155, 完成.</span><br><span class="line">remote: 压缩对象中: 100% (133/133), 完成.</span><br><span class="line">remote: Total 155 (delta 52), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (155/155), 392.57 KiB | 1.86 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (52/52), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><ul>
<li><p>查看分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch develop</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><ul>
<li>检出分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><ul>
<li>显示工作目录和暂存区状态<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch develop</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        readme.md</span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><ul>
<li>添加到暂存区<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> readme.md.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><ul>
<li>提交变动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit . -m <span class="string">"add readme"</span></span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> readme.md.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">[develop dbe505a] add readme</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 readme.md</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><ul>
<li>推送到远程分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push</span><br><span class="line">Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 271 bytes | 271.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote:</span><br><span class="line">remote: Create pull request <span class="keyword">for</span> develop:</span><br><span class="line">remote:   https://git.moyuqingpen.com.cn/users/zhanghao/repos/playground/compare/commits?sourceBranch=refs/heads/develop</span><br><span class="line">remote:</span><br><span class="line">To ssh://git.moyuqingpen.com.cn:7999/~zhanghao/playground.git</span><br><span class="line">   dbe505a..dcf6cc8  develop -&gt; develop</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>克隆-修改-提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">$ git <span class="built_in">clone</span> ssh://git.moyuqingpen.com.cn:7999/~zhanghao/playground.git</span><br><span class="line"><span class="comment"># do some change here ...</span></span><br><span class="line"><span class="comment"># 添加到索引</span></span><br><span class="line">$ git add .</span><br><span class="line"><span class="comment"># 记录变动</span></span><br><span class="line">$ git commit . -m <span class="string">"tips"</span></span><br><span class="line"><span class="comment"># 推送到远程分支</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建本地develop分支，并提交到远程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch develop</span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream-to=/origin/develop</span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment"># do some change here</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit . -m <span class="string">"tips"</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除远程develop分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git branch -d -r origin/develop</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>注：以上只是 <code>git</code> 命令行的简单教程，具体的用法请参考 <code>git &lt;command&gt; --help</code>，或<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">git book</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>博客计划 · 2018年</title>
    <url>/2018/11/13/plan-blog-2018/</url>
    <content><![CDATA[<p><strong>博客计划 · 2018年</strong></p>
<a id="more"></a>
<ul>
<li style="list-style: none"><input type="checkbox" checked> <code>git</code> 命令行简易教程</li>
<li style="list-style: none"><input type="checkbox"> <code>eslint</code></li>
<li style="list-style: none"><input type="checkbox"> <code>es6 Proxy</code></li>
<li style="list-style: none"><input type="checkbox" checked> <code>es6 Reflect</code></li>
<li style="list-style: none"><input type="checkbox" checked> <code>es6 Module</code></li>
<li style="list-style: none"><input type="checkbox" checked> <code>es6 Class</code></li>
<li style="list-style: none"><input type="checkbox"> 基于 <code>nodejs</code> 的爬虫</li>
<li style="list-style: none"><input type="checkbox" checked> <code>css flex</code></li>
<li style="list-style: none"><input type="checkbox" checked> <code>vim</code></li>
<li style="list-style: none"><input type="checkbox" checked> <code>sftp</code></li>
<li style="list-style: none"><input type="checkbox"> <code>webpack</code></li>
<li style="list-style: none"><input type="checkbox"> <code>nginx</code></li>
<li style="list-style: none"><input type="checkbox"> <code>shell</code>编程</li>
<li style="list-style: none"><input type="checkbox"> <code>c</code></li>
<li style="list-style: none"><input type="checkbox"> <code>python</code></li>
<li style="list-style: none"><input type="checkbox"> 数据结构与算法</li>
</ul>
]]></content>
      <categories>
        <category>plan</category>
      </categories>
      <tags>
        <tag>plan-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue · 生命周期</title>
    <url>/2018/11/09/vue-learn-001/</url>
    <content><![CDATA[<p><strong>1. beforeCreate</strong><br><strong>2. created</strong><br><strong>3. beforeMount</strong><br><strong>4. mounted</strong><br><strong>5. beforeUpdate</strong><br><strong>6. updated</strong><br><strong>7. beforeDestroy</strong><br><strong>8. destroyed</strong><br><strong>9. 示例</strong></p>
<a id="more"></a>
<blockquote>
<p>Vue生命周期图示</p>
</blockquote>
<p><img src="/images/vue-lifeCircle.png" alt="vue-lifeCircle"></p>
<h3 id="1-beforeCreate"><a href="#1-beforeCreate" class="headerlink" title="1. beforeCreate"></a>1. beforeCreate</h3><blockquote>
<p>在实例初始化之后，数据观测(data observer)和event/watcher事件配置之前被调用</p>
</blockquote>
<h3 id="2-created"><a href="#2-created" class="headerlink" title="2. created"></a>2. created</h3><blockquote>
<p>在实例创建完成之后被立即调用<br>在这一步，已完成一下的配置：<br>  数据观测(data observer)<br>  属性和方法的运算<br>  watch/event事件回调<br>挂载阶段还未开始，$el属性目前不可用</p>
</blockquote>
<h3 id="3-beforeMount"><a href="#3-beforeMount" class="headerlink" title="3. beforeMount"></a>3. beforeMount</h3><blockquote>
<p>在挂载开始之前被调用<br>该钩子在服务端渲染期间不被调用</p>
</blockquote>
<h3 id="4-mounted"><a href="#4-mounted" class="headerlink" title="4. mounted"></a>4. mounted</h3><blockquote>
<p>el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子<br>mounted时，子组件未必已经被挂载<br>若需要整个视图渲染完毕再执行，需要用vm.$nextTick()<br>该钩子在服务端渲染期间不被调用</p>
</blockquote>
<h3 id="5-beforeUpdate"><a href="#5-beforeUpdate" class="headerlink" title="5. beforeUpdate"></a>5. beforeUpdate</h3><blockquote>
<p>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。<br>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</p>
</blockquote>
<h3 id="6-updated"><a href="#6-updated" class="headerlink" title="6. updated"></a>6. updated</h3><blockquote>
<p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子<br>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。<br>注意 updated 不会承诺所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以用 vm.$nextTick<br>该钩子在服务器端渲染期间不被调用。</p>
</blockquote>
<h3 id="7-beforeDestroy"><a href="#7-beforeDestroy" class="headerlink" title="7. beforeDestroy"></a>7. beforeDestroy</h3><blockquote>
<p>实例销毁之前调用。在这一步，实例仍然完全可用。<br>该钩子在服务器端渲染期间不被调用。</p>
</blockquote>
<h3 id="8-destroyed"><a href="#8-destroyed" class="headerlink" title="8. destroyed"></a>8. destroyed</h3><blockquote>
<p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<br>该钩子在服务器端渲染期间不被调用。</p>
</blockquote>
<h3 id="9-示例"><a href="#9-示例" class="headerlink" title="9. 示例"></a>9. 示例</h3><figure class="highlight plain"><figcaption><span>app.vue</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;hello, vue.&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      time: new Date().getTime()</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&apos;beforeCreate&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&apos;created&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&apos;beforeMount&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&apos;mounted&apos;, new Date().getTime() - this.time);</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      this.$forceUpdate();</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      this.$destroy();</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&apos;beforeUpdate&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&apos;updated&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    console.log(&apos;beforeDestroyed&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&apos;destroyed&apos;, new Date().getTime() - this.time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>输出结果</span></figcaption><table><tr><td class="code"><pre><span class="line">beforeCreate NaN <span class="comment"># 这里输出NaN是因为beforeCreate时，this.time取不到值</span></span><br><span class="line">created 0</span><br><span class="line">beforeMount 0</span><br><span class="line">mounted 3</span><br><span class="line">beforeUpdate 1005</span><br><span class="line">updated 1006</span><br><span class="line">beforeDestroyed 2004</span><br><span class="line">destroyed 2005</span><br></pre></td></tr></table></figure>
<p>参考文档：<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">Vue 官网 API</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue-lifeCircle</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 · async/await</title>
    <url>/2018/11/09/es6-learn-002/</url>
    <content><![CDATA[<blockquote>
<p><code>async</code> 是 <code>Generator</code> 函数的语法糖，用于异步编程<br><code>async</code> 返回 <code>Promise</code> 对象，可以链式添加回调函数<br><code>await</code> 代表后面跟着的可能是异步操作，要等待异步操作结束，再接着执行如果不是异步操作，会立即返回对应值</p>
</blockquote>
<a id="more"></a>
<p>例如：现在有一个商品的 <code>goodsId</code>，要获取商品对应店铺的所有宝贝。</p>
<ul>
<li>1.先通过 <code>goodsId</code> 查询 <code>shopId</code></li>
<li>2.然后通过 <code>shopId</code> 查询 <code>GoodsList</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getGoodsList</span>(<span class="params">goodsId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> shopId = <span class="keyword">await</span> getShopIdByGoodsId(goodsId)</span><br><span class="line">  <span class="keyword">const</span> goodsList = <span class="keyword">await</span> getAllGoodsByShopId(shopId)</span><br><span class="line">  <span class="keyword">return</span> goodsList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>async</code> 函数 <code>return</code> 返回的值，将会是第一个回调函数的参数</p>
</blockquote>
<p>例如：获取店铺的所有宝贝之后，按照价格进行排序<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getGoodsList()</span><br><span class="line">  .then(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">    sortByPrice(list)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>async</code> 函数内部出错时，如果内部异步方法没有错误处理，则 <code>Promise</code> 的状态会变为 <code>rejected</code>，该错误会被第一个 <code>catch</code> 回调函数接收。</p>
</blockquote>
<p>例如：获取 <code>shopId</code> 出错了，如果 <code>getShopIdByGoodsId</code> 内部有部署 <code>catch</code> 方法，错误会被自己捕获，如果没有部署，错误会被 <code>async</code> 的回调捕获。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getGoodsList()</span><br><span class="line">  .then(f1)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error))</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6-async</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 · Promise</title>
    <url>/2018/11/07/es6-learn-001/</url>
    <content><![CDATA[<p><strong>1. 理解Promise</strong><br><strong>2. new Promise()</strong><br><strong>3. Promise.resolve()</strong><br><strong>4. Promise.reject()</strong><br><strong>5. Promise.prototype.then()</strong><br><strong>6. Promise.prototype.catch()</strong><br><strong>7. Promise.prototype.finally()</strong><br><strong>8. Promise.prototype.done()</strong><br><strong>9. Promise.all()</strong><br><strong>10. Promise.race()</strong></p>
<a id="more"></a>
<blockquote>
<p>异步编程的传统解决方案是回调函数和事件，在复杂的逻辑中，很容易出现多层回调函数嵌套(<code>Callback Hell</code>)<br>Promise 是一种新的解决方案，帮助开发者摆脱多层回调函数嵌套问题</p>
</blockquote>
<h3 id="理解Promise"><a href="#理解Promise" class="headerlink" title="理解Promise"></a>理解Promise</h3><p>Promise即承诺，即答应未来会做某件事。在未来某个时间，这个承诺可能会实现，也可能会被拒绝。<br>例如：A承诺(promise)B，十年后娶B。在这十年里，这个承诺的状态是进行中(状态为pending)。十年后，如果A娶B，这个承诺就实现(状态变为resolved)了。如果A不娶B，这个承诺就被拒绝(转态变为rejected)了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (AMarryB) &#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, tenYear)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>B说：十年后如果A娶B(承诺resolved)，B就给A生猴子；如果A不娶B(承诺rejected)，B就给嫁给C；但无论如何(finally)，B都爱着A。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 十年后，A娶了B</span></span><br><span class="line">  BMakeMonkeyWithA()</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 十年后，A不娶B</span></span><br><span class="line">  BMarryC()</span><br><span class="line">&#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 无论如何</span></span><br><span class="line">  BStillLoveA()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>Promise</code>的状态一旦发生变化，就不会再变。<br><code>Promise</code>的状态只能变化一次，而且只能是下面两种之一：<br><code>pending</code> =&gt; <code>resolved</code>，即承诺达成<br><code>pending</code> =&gt; <code>rejected</code>，即承诺未达成</p>
</blockquote>
<h3 id="new-Promise"><a href="#new-Promise" class="headerlink" title="new Promise()"></a>new Promise()</h3><p>创建一个<code>Promise</code>实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><p>把<code>Promise</code>实例的状态由<code>pending</code>转化为<code>resolved</code>，可以传参<br>也可以把普通对象转化为<code>Promise</code>对象，并立即转化为<code>resolved</code>状态<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// some async code here</span></span><br><span class="line">  resolve(param1)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h3><p>把<code>Promise</code>实例的状态由<code>pending</code>转化为<code>rejected</code>，可以传参<br>也可以把普通对象转化为<code>Promise</code>对象，并立即转化为<code>rejected</code>状态<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// some async code here</span></span><br><span class="line">  reject(param2)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h3><p><code>Promise</code>实例的回调函数，<code>Promise</code>实例的状态发生变化时调用。<br>有两个参数：<br>第一个参数是状态变为<code>resolved</code>的回调，接收<code>resolve()</code>传递的参数；<br>第二个是状态变为<code>rejected</code>的回调，接收<code>reject()</code>传递的参数；<br>第二个参数是可选的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.then(<span class="function">(<span class="params">param1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve()的回调</span></span><br><span class="line">  <span class="comment">// do some thing here</span></span><br><span class="line">&#125;, (param2) =&gt; &#123;</span><br><span class="line">  <span class="comment">// reject()的回调</span></span><br><span class="line">  <span class="comment">// do some thing here</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h3><p><code>Promise</code>实例状态变为<code>rejected</code>的回调，<br><code>.then(null, rejectCallBack)</code>的别名，<br>接收<code>reject()</code>传递的参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.catch(<span class="function"><span class="params">param2</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reject()的回调</span></span><br><span class="line">  <span class="comment">// some code here</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h3><p>只要状态发生变化，就会执行<br>有一个回调参数，处于链式的末端<br>ES2018引入标准<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then()</span><br><span class="line">  .catch()</span><br><span class="line">  .finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 不接收任何参数</span></span><br><span class="line">    <span class="comment">// some code here</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="Promise-prototype-done"><a href="#Promise-prototype-done" class="headerlink" title="Promise.prototype.done()"></a>Promise.prototype.done()</h3><p>捕捉可能出现的错误，并向全局抛出<br>处于链式的末端<br>可以有回调参数，也可以没有<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then()</span><br><span class="line">  .catch()</span><br><span class="line">  .done()</span><br></pre></td></tr></table></figure></p>
<h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><p>将多个<code>Promise</code>实例包装成一个新的<code>Promise</code>实例<br>接收一个数组作为参数<br>数组的元素都是<code>Promise</code>实例<br>所有参数<code>Promise</code>实例状态都变化为<code>resolved</code>，该实例的状态才会变为<code>resolved</code>，所有参数<code>Promise</code>实例都可以向该实例传参，这些参数会被包装成一个数组，传给改实例<br>有一个参数<code>Promise</code>实例的状态变为<code>rejected</code>，该实例的状态立即变为<code>rejected</code>，率先发生状态变化的参数<code>Promise</code>实例，可以把参数传给该实例<br>例如：猴王承诺花十年时间同时和三千妃嫔生猴子，十年后，最聪明的小公猴立为太子，最漂亮的小母猴立为公主，但是如果发现有的小猴子不像猴王，承诺作废。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.all([ makeMonkeyWith1, makeMonkeyWith2, ...])</span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="params">monkeys</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// monkeys是所有小猴子的数组</span></span><br><span class="line">    monkeys.map(<span class="function"><span class="params">monkey</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(isMale(monkey) &amp;&amp; isMostClever(monkey)) &#123;</span><br><span class="line">        bePrince(monkey)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFemale(monkey) &amp;&amp; isMostBeautiful(monkey)) &#123;</span><br><span class="line">        bePrincess(monkey)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        beGone(monkey)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    monkeyKingHadGreenHats()</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><p>将多个<code>Promise</code>实例包装成一个新的<code>Promise</code>实例<br>接收一个数组作为参数<br>数组的元素都是<code>Promise</code>实例<br>任何一个参数<code>Promise</code>实例状态发生变化，都会改变该实例的状态<br>率先发生状态变化的参数<code>Promise</code>实例，可以把参数传给该实例<br>例如：猴王承诺同时和三千妃嫔生猴子，第一个出生的如果是公猴立为太子，如果是母猴立为公主。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.race([ makeMonkeyWith1InTenYear, makeMonkeyWith2InTenYear, ...])</span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="params">monkey</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// monkey是第一个出生的小猴子</span></span><br><span class="line">    <span class="keyword">if</span>(isMale(monkey)) &#123;</span><br><span class="line">      bePrince(monkey)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isFemale(monkey)) &#123;</span><br><span class="line">      bePrincess(monkey)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      beGone(monkey)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    neverBelieveInLove()</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>es6-promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux · 环境变量</title>
    <url>/2018/11/07/linux-learn-001/</url>
    <content><![CDATA[<p><strong>1. 查看环境变量</strong><br><strong>2. 设置临时环境变量</strong><br><strong>3. 当前用户的环境变量</strong><br><strong>4. 所有用户的环境变量</strong></p>
<a id="more"></a>
<h3 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h3><ul>
<li><p><code>$PATH</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>export</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost node-v11.1.0-linux-x64]<span class="comment"># export</span></span><br><span class="line"><span class="built_in">declare</span> -x HISTCONTROL=<span class="string">"ignoredups"</span></span><br><span class="line"><span class="built_in">declare</span> -x HISTSIZE=<span class="string">"1000"</span></span><br><span class="line"><span class="built_in">declare</span> -x HOME=<span class="string">"/root"</span></span><br><span class="line"><span class="built_in">declare</span> -x HOSTNAME=<span class="string">"localhost.localdomain"</span></span><br><span class="line"><span class="built_in">declare</span> -x LANG=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line"><span class="built_in">declare</span> -x LESSOPEN=<span class="string">"||/usr/bin/lesspipe.sh %s"</span></span><br><span class="line"><span class="built_in">declare</span> -x LOGNAME=<span class="string">"root"</span></span><br><span class="line"><span class="built_in">declare</span> -x LS_COLORS=<span class="string">"rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa=01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:"</span></span><br><span class="line"><span class="built_in">declare</span> -x MAIL=<span class="string">"/var/spool/mail/root"</span></span><br><span class="line"><span class="built_in">declare</span> -x OLDPWD=<span class="string">"/opt"</span></span><br><span class="line"><span class="built_in">declare</span> -x PATH=<span class="string">"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"</span></span><br><span class="line"><span class="built_in">declare</span> -x PWD=<span class="string">"/opt/node-v11.1.0-linux-x64"</span></span><br><span class="line"><span class="built_in">declare</span> -x SELINUX_LEVEL_REQUESTED=<span class="string">""</span></span><br><span class="line"><span class="built_in">declare</span> -x SELINUX_ROLE_REQUESTED=<span class="string">""</span></span><br><span class="line"><span class="built_in">declare</span> -x SELINUX_USE_CURRENT_RANGE=<span class="string">""</span></span><br><span class="line"><span class="built_in">declare</span> -x SHELL=<span class="string">"/bin/bash"</span></span><br><span class="line"><span class="built_in">declare</span> -x SHLVL=<span class="string">"1"</span></span><br><span class="line"><span class="built_in">declare</span> -x SSH_CLIENT=<span class="string">"192.168.197.1 56779 22"</span></span><br><span class="line"><span class="built_in">declare</span> -x SSH_CONNECTION=<span class="string">"192.168.197.1 56779 192.168.197.130 22"</span></span><br><span class="line"><span class="built_in">declare</span> -x SSH_TTY=<span class="string">"/dev/pts/0"</span></span><br><span class="line"><span class="built_in">declare</span> -x TERM=<span class="string">"xterm"</span></span><br><span class="line"><span class="built_in">declare</span> -x USER=<span class="string">"root"</span></span><br><span class="line"><span class="built_in">declare</span> -x XDG_RUNTIME_DIR=<span class="string">"/run/user/0"</span></span><br><span class="line"><span class="built_in">declare</span> -x XDG_SESSION_ID=<span class="string">"1"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="临时环境变量"><a href="#临时环境变量" class="headerlink" title="临时环境变量"></a>临时环境变量</h3><ul>
<li>重启后临时环境变量消失<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># export PATH=/opt/nodejs/bin:$PATH</span></span><br><span class="line">[root@localhost opt]<span class="comment"># node -v</span></span><br><span class="line">v11.1.0</span><br><span class="line">[root@localhost opt]<span class="comment"># npm -v</span></span><br><span class="line">6.4.1</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="当前用户的环境变量-CentOS"><a href="#当前用户的环境变量-CentOS" class="headerlink" title="当前用户的环境变量(CentOS)"></a>当前用户的环境变量(CentOS)</h3><ul>
<li><p>编辑 <code>~/.bash_profile</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi .bash_profile</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>找到PATH，并在后面追加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATH=$PATH:$HOME/bin:/opt/nodejs/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># source .bash_profile</span></span><br><span class="line">[root@localhost ~]<span class="comment"># node -v</span></span><br><span class="line">v11.1.0</span><br><span class="line">[root@localhost ~]<span class="comment"># npm -v</span></span><br><span class="line">6.4.1</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="所有用户的环境变量"><a href="#所有用户的环境变量" class="headerlink" title="所有用户的环境变量"></a>所有用户的环境变量</h3><ul>
<li><p>编辑 <code>/etc/profile</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vi .bash_profile</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在后面追加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATH=$PATH:$HOME/bin:/opt/nodejs/bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷新环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># source /etc/profile</span></span><br><span class="line">[root@localhost ~]<span class="comment"># node -v</span></span><br><span class="line">v11.1.0</span><br><span class="line">[root@localhost ~]<span class="comment"># npm -v</span></span><br><span class="line">6.4.1</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux-env</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs · 安装</title>
    <url>/2018/11/06/nodejs-learn-001/</url>
    <content><![CDATA[<p><strong>1. 官网</strong><br><strong>2. 源码安装</strong><br><strong>3. npm源</strong></p>
<a id="more"></a>
<h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p>NodeJS有两个版本：<br>    <code>长期维护版</code>(LTS)推荐多数用户使用，建议开发中使用；<br>    <code>最新发布版</code>含实验性功能，建议个人学习时使用。</p>
<ul>
<li><a href="https://nodejs.org" target="_blank" rel="noopener">官网-英文</a></li>
<li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">官网-中文</a></li>
<li><a href="https://nodejs.org/dist" target="_blank" rel="noopener">官方镜像</a></li>
<li><a href="http://nodejs.cn" target="_blank" rel="noopener">国内官网</a></li>
<li><a href="https://npm.taobao.org/mirrors/node/" target="_blank" rel="noopener">淘宝镜像</a></li>
</ul>
<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://npm.taobao.org/mirrors/node/v10.13.0/node-v10.13.0.tar.gz</span><br><span class="line">$ tar -zxvf node-v10.13.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> node-v10.13.0</span><br><span class="line">$ ./configure</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<ul>
<li>官方镜像下载较慢，建议使用国内镜像</li>
<li>用到了 <code>wget</code>下载源码，也可以使用其它方式下载</li>
<li>编译需要 <code>gcc</code> <code>g++</code> <code>gcc-c++</code></li>
<li>源码安装时间较长，请耐心等待</li>
<li>推荐使用二进制包，下载解压即用</li>
</ul>
<h3 id="npm源"><a href="#npm源" class="headerlink" title="npm源"></a>npm源</h3><p><a href="https://registry.npmjs.org/" target="_blank" rel="noopener">官方源</a>在国外，速度较慢，建议切换为国内源，推荐使用<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝源</a>。<br>更换npm源有三种方式，如下：</p>
<h4 id="1-直接修改配置文件-推荐"><a href="#1-直接修改配置文件-推荐" class="headerlink" title="1.直接修改配置文件(推荐)"></a>1.直接修改配置文件(推荐)</h4><p>配置文件在 <code>~/.npmrc</code></p>
<figure class="highlight bash"><figcaption><span>.npmrc</span></figcaption><table><tr><td class="code"><pre><span class="line">registry=https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<h4 id="2-使用-cnpm-替代-npm"><a href="#2-使用-cnpm-替代-npm" class="headerlink" title="2.使用 cnpm 替代 npm"></a>2.使用 <a href="https://npm.taobao.org/" target="_blank" rel="noopener">cnpm</a> 替代 npm</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install cnpm -g</span><br></pre></td></tr></table></figure>
<h4 id="3-使用-nrm-管理-npm-源"><a href="#3-使用-nrm-管理-npm-源" class="headerlink" title="3.使用 nrm 管理 npm 源"></a>3.使用 <a href="https://www.npmjs.com/package/nrm" target="_blank" rel="noopener">nrm</a> 管理 npm 源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 nrm</span></span><br><span class="line">$ npm install nrm -g</span><br><span class="line"><span class="comment"># 列出可用的npm源</span></span><br><span class="line">$ nrm ls</span><br><span class="line"><span class="comment"># 切换为淘宝npm源</span></span><br><span class="line">$ nrm use taobao</span><br><span class="line"><span class="comment"># 切换为官方npm源</span></span><br><span class="line">$ nrm use npm</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs-install</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 模板</title>
    <url>/2018/11/05/hexo-learn-016/</url>
    <content><![CDATA[<p><strong>1. 模板</strong><br><strong>2. 布局</strong><br><strong>3. 局部模板</strong><br><strong>4. 局部变量</strong><br><strong>5. 优化</strong></p>
<a id="more"></a>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>每个主题至少应包含一个<code>index</code>模板</p>
<table>
<thead>
<tr>
<th>模板</th>
<th>用途</th>
<th>回调</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td>首页</td>
<td>-</td>
</tr>
<tr>
<td>post</td>
<td>文章</td>
<td>index</td>
</tr>
<tr>
<td>page</td>
<td>分页</td>
<td>index</td>
</tr>
<tr>
<td>archive</td>
<td>归档</td>
<td>index</td>
</tr>
<tr>
<td>category</td>
<td>分类</td>
<td>archive</td>
</tr>
<tr>
<td>tag</td>
<td>标签</td>
<td>archive</td>
</tr>
</tbody>
</table>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>通过布局让多个模板共享相同的结构<br>默认使用<code>layout</code>布局，可以在<code>front-matter</code>中指定其他布局，或设置为<code>false</code>关闭布局功能</p>
<h3 id="局部模板"><a href="#局部模板" class="headerlink" title="局部模板"></a>局部模板</h3><p>局部模板类似组件，可以在多个模板之间共享</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>可以在局部模板中指定局部变量</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>Hexo 2.7 新增了局部缓存(<code>Fragment Caching</code>)功能</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 主题</title>
    <url>/2018/11/05/hexo-learn-015/</url>
    <content><![CDATA[<p><strong>1. 更换主题</strong><br><strong>2. 主题结构</strong><br><strong>3. _config.yml</strong><br><strong>4. language</strong><br><strong>5. layout</strong><br><strong>6. scripts</strong><br><strong>7. source</strong></p>
<a id="more"></a>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><h4 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h4><ul>
<li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题列表</a></li>
</ul>
<h4 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h4><ul>
<li>克隆主题仓库到本地<code>themes</code>文件夹下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> repo-url themes/repo-name</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><ul>
<li>修改根目录下的<code>_config.yml</code>文件<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">repo-name</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="重新生成"><a href="#重新生成" class="headerlink" title="重新生成"></a>重新生成</h4><ul>
<li>重新生成静态资源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="主题结构"><a href="#主题结构" class="headerlink" title="主题结构"></a>主题结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── languages</span><br><span class="line">├── layout</span><br><span class="line">├── scripts</span><br><span class="line">└── source</span><br></pre></td></tr></table></figure>
<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>主题的配置文件，修改时会自动更新，无需重启</p>
<h3 id="languages"><a href="#languages" class="headerlink" title="languages"></a>languages</h3><p>语言文件夹</p>
<h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>布局文件夹，存放主题的模板文件。<br>内建Swig模板引擎，可以安装插件来支持EJS、Haml或Jade<br>根据扩展名来决定使用哪一个模板引擎</p>
<h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>脚本文件夹，启动时会自动载入</p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹，除了模板以外的Asset都应该放在这里。<br><code>_</code>开头的文件或文件夹会被忽略<br>如果文件可以渲染，解析后存储到<code>public</code>文件夹，否则直接拷贝到<code>public</code>文件夹</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 永久链接</title>
    <url>/2018/11/04/hexo-learn-014/</url>
    <content><![CDATA[<p><strong>1. 变量</strong><br><strong>2. 示例</strong><br><strong>3. 多语种支持</strong></p>
<a id="more"></a>
<blockquote>
<p>可以在<code>_config.yml</code>配置中调整网站的永久链接，也可以在每篇文章的<code>Front-matter</code>中指定</p>
</blockquote>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:year</code></td>
<td>年</td>
</tr>
<tr>
<td><code>:month</code></td>
<td>月</td>
</tr>
<tr>
<td><code>:day</code></td>
<td>日</td>
</tr>
<tr>
<td><code>:title</code></td>
<td>文章名称</td>
</tr>
<tr>
<td><code>:post_title</code></td>
<td>文章标题</td>
</tr>
<tr>
<td><code>:id</code></td>
<td>文章ID</td>
</tr>
<tr>
<td><code>:category</code></td>
<td>分类</td>
</tr>
</tbody>
</table>
<p>在<code>permalink_default</code>调整变量的默认值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">  lang:</span> <span class="string">en</span></span><br></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><table>
<thead>
<tr>
<th>参数</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>:year/:month/:day/:title</td>
<td>2018/11/04/hello-world</td>
</tr>
<tr>
<td>:year-:month-:day-:title.html</td>
<td>2018-11-04-hello-world.html</td>
</tr>
<tr>
<td>:/category/:title</td>
<td>foo/bar/hello-world</td>
</tr>
</tbody>
</table>
<h3 id="多语种支持"><a href="#多语种支持" class="headerlink" title="多语种支持"></a>多语种支持</h3><p>修改<code>new_post_name</code> 和 <code>permalink</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:lang/:title.md</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:lang/:title/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"hello world"</span> --lang en</span><br><span class="line"><span class="comment"># =&gt; source/_post/en/hello-world.md</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/en/hello-world/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 部署</title>
    <url>/2018/11/03/hexo-learn-013/</url>
    <content><![CDATA[<p><strong>1. Git</strong><br><strong>2. Heroku</strong><br><strong>3. Rsync</strong><br><strong>4. OpenShift</strong><br><strong>5. FTPSync</strong><br><strong>6. 其它方法</strong></p>
<a id="more"></a>
<h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><figure class="highlight yaml"><figcaption><span>修改_config.yml，可以同时部署多个</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">heroku</span></span><br><span class="line"><span class="attr">  repo:</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>一键部署</span></figcaption><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><figure class="highlight bash"><figcaption><span>安装hexo-deployer-git</span></figcaption><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">[branch]</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">[message]</span></span><br></pre></td></tr></table></figure>
<h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><figure class="highlight bash"><figcaption><span>安装hexo-deployer-heroku</span></figcaption><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-heroku --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">heroku</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">[message]</span></span><br></pre></td></tr></table></figure>
<h3 id="Rsync"><a href="#Rsync" class="headerlink" title="Rsync"></a>Rsync</h3><figure class="highlight bash"><figcaption><span>安装hexo-deployer-rsync</span></figcaption><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-rsync --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">rsync</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">&lt;host&gt;</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">&lt;user&gt;</span></span><br><span class="line"><span class="attr">  root:</span> <span class="string">&lt;root&gt;</span></span><br><span class="line"><span class="attr">  port:</span> <span class="string">[port]</span></span><br><span class="line"><span class="attr">  delete:</span> <span class="string">Boolean</span> <span class="comment"># 删除远程主机上的旧文件</span></span><br><span class="line"><span class="attr">  verbose:</span> <span class="string">Boolean</span> <span class="comment"># 显示调试信息</span></span><br><span class="line"><span class="attr">  ignore_errors:</span> <span class="string">Boolean</span> <span class="comment"># 忽略错误</span></span><br></pre></td></tr></table></figure>
<h3 id="OpenShift"><a href="#OpenShift" class="headerlink" title="OpenShift"></a>OpenShift</h3><figure class="highlight bash"><figcaption><span>安装hexo-deployer-openshift</span></figcaption><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-openshift --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">openshift</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">[message]</span></span><br></pre></td></tr></table></figure>
<h3 id="FTPSync"><a href="#FTPSync" class="headerlink" title="FTPSync"></a>FTPSync</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-ftpsync --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ftpsync</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">&lt;host&gt;</span></span><br><span class="line"><span class="attr">  user:</span> <span class="string">&lt;user&gt;</span></span><br><span class="line"><span class="attr">  pass:</span> <span class="string">&lt;password&gt;</span></span><br><span class="line"><span class="attr">  remote:</span> <span class="string">[remote]</span> <span class="comment"># 远程主机的根目录</span></span><br><span class="line"><span class="attr">  port:</span> <span class="string">[port]</span></span><br><span class="line"><span class="attr">  ignore:</span> <span class="string">[ignore]</span> <span class="comment"># 忽略的文件或目录</span></span><br><span class="line"><span class="attr">  connections:</span> <span class="string">[connections]</span> <span class="comment"># 使用连接数 1</span></span><br><span class="line"><span class="attr">  verbose:</span> <span class="string">Boolean</span> <span class="comment"># 显示调试信息 true</span></span><br></pre></td></tr></table></figure>
<h3 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h3><p><code>Hexo</code>生成的所有文件都放在<code>public</code>文件夹中，可以将它们复制到静态服务器中</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 生成器</title>
    <url>/2018/11/03/hexo-learn-012/</url>
    <content><![CDATA[<p><strong>1. 生成文件</strong><br><strong>2. 监视文件变动</strong><br><strong>3. 完成后部署</strong><br><strong>4. 简写</strong></p>
<a id="more"></a>
<h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate --watch</span><br></pre></td></tr></table></figure>
<h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate --deploy</span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure>
<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 服务器</title>
    <url>/2018/11/03/hexo-learn-011/</url>
    <content><![CDATA[<p><strong>1. hexo-server</strong><br><strong>2. 静态模式</strong><br><strong>3. 自定义IP</strong><br><strong>4. Pow</strong></p>
<a id="more"></a>
<h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo-server"></a>hexo-server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>
<h3 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h3><p>静态模式下，服务器只处理<code>public</code>文件夹内的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server -s</span><br></pre></td></tr></table></figure>
<h3 id="自定义IP"><a href="#自定义IP" class="headerlink" title="自定义IP"></a>自定义IP</h3><p>默认运行在<code>0.0.0.0</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure></p>
<h3 id="Pow"><a href="#Pow" class="headerlink" title="Pow"></a>Pow</h3><p>Pow是Mac系统上的零配置Rack服务器<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl get.pow.cx | sh</span><br><span class="line">$ <span class="built_in">cd</span> ~/.pow</span><br><span class="line">$ ln -s /path/to/myapp</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 数据文件夹</title>
    <url>/2018/11/02/hexo-learn-010/</url>
    <content><![CDATA[<p><strong>1. 数据文件</strong></p>
<a id="more"></a>
<h3 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h3><p>hexo3.0新增数据文件功能<br>自动载入<code>source/_data</code>内的YAML/JSON文件</p>
<figure class="highlight yaml"><figcaption><span>source/_data/menu.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">Archives:</span> <span class="string">/archives/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% for (var link in site.data.menu) &#123; %&gt;</span><br><span class="line">&lt;a href=&quot;&lt;%= site.data.menu[link] %&gt;&quot;&gt; &lt;%= link %&gt; &lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;/archives/&quot;&gt;Archives&lt;/a&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo · 资源文件夹</title>
    <url>/2018/11/02/hexo-learn-009/</url>
    <content><![CDATA[<p><strong>1. 资源文件夹</strong><br><strong>2. 文章资源文件夹</strong><br><strong>3. 相对路径引用的标签插件</strong></p>
<a id="more"></a>
<h3 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h3><p>资源（Asset）代表 source 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>
<h3 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h3><p>将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来启用，默认为 <code>false</code><br>通过 <code>new</code> 命令创建文章时，会同时创建同名文件夹，可以通过相对路径来引用它们</p>
<h3 id="相对路径引用的标签插件"><a href="#相对路径引用的标签插件" class="headerlink" title="相对路径引用的标签插件"></a>相对路径引用的标签插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>
<p>正确的引用图片方式是使用下列的标签插件而不是 <code>markdown</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 标签插件</title>
    <url>/2018/11/01/hexo-learn-008/</url>
    <content><![CDATA[<p><strong>1. 引用块</strong><br><strong>2. 代码块</strong><br><strong>3. 反引号代码块</strong><br><strong>4. Pull Quote</strong><br><strong>5. jsFiddle</strong><br><strong>6. Gist</strong><br><strong>7. iframe</strong><br><strong>8. Image</strong><br><strong>9. Link</strong><br><strong>10. Include Code</strong><br><strong>11. Youtube</strong><br><strong>12. Vimeo</strong><br><strong>13. 引用文章</strong><br><strong>14. 引用资源</strong><br><strong>15. Raw</strong></p>
<a id="more"></a>
<h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><ul>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果</p>
<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
</li>
</ul>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><ul>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock lang:javascript Object.assign http://es6.ruanyifeng.com/#docs/object#Object-assign Object.assign %&#125;</span><br><span class="line">Object.assign(targetObject, sourceObject);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果</p>
<figure class="highlight javascript"><figcaption><span>Object.assign</span><a href="http://es6.ruanyifeng.com/#docs/object#Object-assign" target="_blank" rel="noopener">Object.assign</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(targetObject, sourceObject);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h3><ul>
<li><p>用法<br><code>[language] [title] [url] [link text] code snippet</code></p>
</li>
<li><p>效果</p>
<figure class="highlight javascript"><figcaption><span>Object.assign</span><a href="http://es6.ruanyifeng.com/#docs/object#Object-assign" target="_blank" rel="noopener">Object.assign</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(targetObject, sourceObject);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h3><ul>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果</p>
<blockquote class="pullquote [class]"><p>content</p>
</blockquote>
</li>
</ul>
<h3 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h3><ul>
<li>用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h3><ul>
<li>用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% gist gist_id [filename %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><ul>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果</p>
<iframe src="https://www.baidu.com" width="680" height="280" frameborder="0" allowfullscreen></iframe>
</li>
</ul>
<h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><ul>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果<br><img src="\images\dog.png" alt="img"></p>
</li>
</ul>
<h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><ul>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果</p>
<a href="http://es6.ruanyifeng.com/#docs/object#Object-assign" title="ES6 Object.assign" target="_blank" rel="noopener">Object.assign</a>
</li>
</ul>
<h3 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h3><ul>
<li>用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] path/to/file %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h3><ul>
<li>用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h3><ul>
<li>用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% vimeo vimeo_id %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h3><ul>
<li>用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h3><ul>
<li>用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% assset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h3><ul>
<li>用法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · Front-Matter</title>
    <url>/2018/11/01/hexo-learn-007/</url>
    <content><![CDATA[<p><strong>1. <code>layout</code> 布局</strong><br><strong>2. <code>title</code> 标题</strong><br><strong>3. <code>date</code> 建立日期</strong><br><strong>4. <code>update</code> 更新日期</strong><br><strong>5. <code>comments</code> 开启评论</strong><br><strong>6. <code>tags</code> 标签</strong><br><strong>7. <code>categories</code> 分类</strong> </p>
<a id="more"></a>
<p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo · Front-Matter</span><br><span class="line">date: 2018-11-01 16:06:00</span><br><span class="line">tags: hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 写作</title>
    <url>/2018/10/29/hexo-learn-006/</url>
    <content><![CDATA[<p><strong>1. 新建</strong><br><strong>2. 布局</strong><br><strong>3. 文件名称</strong><br><strong>4. 草稿</strong><br><strong>5. 模板</strong></p>
<a id="more"></a>
<h3 id="1-新建"><a href="#1-新建" class="headerlink" title="1. 新建"></a>1. 新建</h3><p><code>layout</code> 默认为 <code>post</code>， 可以通过修改<code>_config.yml中</code>的 <code>default_layout</code> 来指定默认布局</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-布局"><a href="#2-布局" class="headerlink" title="2. 布局"></a>2. 布局</h3><ul>
<li><code>post</code> – 文章</li>
<li><code>page</code></li>
<li><code>draft</code> – 草稿</li>
</ul>
<h3 id="3-文件名称"><a href="#3-文件名称" class="headerlink" title="3. 文件名称"></a>3. 文件名称</h3><p>默认以标题作为文件名称<br>可以通过 <code>new_post_name</code> 来修改默认文件名称</p>
<h3 id="4-草稿"><a href="#4-草稿" class="headerlink" title="4. 草稿"></a>4. 草稿</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new draft &lt;title&gt;</span><br><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>草稿默认不会展示在页面中，可以在执行是加上 <code>--draft</code> 参数，或把 <code>render_draft</code> 设为 <code>true</code> 来预览草稿。</p>
<h3 id="5-模板"><a href="#5-模板" class="headerlink" title="5. 模板"></a>5. 模板</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new photo <span class="string">'my page'</span></span><br><span class="line"><span class="comment"># 根据 photo 模板来创建 my page</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 迁移</title>
    <url>/2018/10/29/hexo-learn-005/</url>
    <content><![CDATA[<p><strong>1. RSS</strong><br><strong>2. Jekll</strong><br><strong>3. Octopress</strong><br><strong>4. WordPress</strong><br><strong>5. Joomla</strong></p>
<a id="more"></a>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-migrator-rss -S</span><br><span class="line">$ hexo migrate rss &lt;<span class="built_in">source</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h3><ul>
<li>把 _posts 文件夹内的所有文件复制到 source/_posts 文件夹，并在 _config.yml 中修改 new_post_name 参数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure>
<h3 id="Octopress"><a href="#Octopress" class="headerlink" title="Octopress"></a>Octopress</h3><ul>
<li>把 Octopress source/_posts 文件夹内的所有文件转移到 Hexo 的 source/_posts 文件夹，并修改 _config.yml 中的 new_post_name 参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure>
<h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-migrator-wordpress --save</span><br><span class="line">$ hexo migrate wordpress &lt;<span class="built_in">source</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Joomla"><a href="#Joomla" class="headerlink" title="Joomla"></a>Joomla</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-migrator-joomla --save</span><br><span class="line">$ hexo migrate joomla &lt;<span class="built_in">source</span>&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 命令</title>
    <url>/2018/10/29/hexo-learn-004/</url>
    <content><![CDATA[<p><strong>1. init</strong><br><strong>2. new</strong><br><strong>3. generate</strong><br><strong>4. publish</strong><br><strong>5. server</strong><br><strong>6. deploy</strong><br><strong>7. render</strong><br><strong>8. migrate</strong><br><strong>9. clean</strong><br><strong>10. list</strong><br><strong>11. version</strong></p>
<a id="more"></a>
<h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure>
<h3 id="new-新建文章"><a href="#new-新建文章" class="headerlink" title="new 新建文章"></a>new 新建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="comment"># 例如 hexo new post hello-world</span></span><br></pre></td></tr></table></figure>
<h3 id="generate-生成静态文件"><a href="#generate-生成静态文件" class="headerlink" title="generate 生成静态文件"></a>generate 生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<h3 id="publish-发表草稿"><a href="#publish-发表草稿" class="headerlink" title="publish 发表草稿"></a>publish 发表草稿</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] filename</span><br></pre></td></tr></table></figure>
<h3 id="server-启动本地服务器"><a href="#server-启动本地服务器" class="headerlink" title="server 启动本地服务器"></a>server 启动本地服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"><span class="comment"># -p, --port</span></span><br><span class="line"><span class="comment"># -s, --static 只使用静态文件</span></span><br><span class="line"><span class="comment"># -l, --log 启用日志</span></span><br></pre></td></tr></table></figure>
<h3 id="deploy-部署"><a href="#deploy-部署" class="headerlink" title="deploy 部署"></a>deploy 部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br><span class="line"><span class="comment"># -g, --generate 部署之前生成静态文件</span></span><br></pre></td></tr></table></figure>
<h3 id="render-渲染文件"><a href="#render-渲染文件" class="headerlink" title="render 渲染文件"></a>render 渲染文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br><span class="line"><span class="comment"># -o, --output 设置输出路径</span></span><br></pre></td></tr></table></figure>
<h3 id="migrate-从其它博客迁移"><a href="#migrate-从其它博客迁移" class="headerlink" title="migrate 从其它博客迁移"></a>migrate 从其它博客迁移</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo migrate &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="clean-清理缓存和静态文件"><a href="#clean-清理缓存和静态文件" class="headerlink" title="clean 清理缓存和静态文件"></a>clean 清理缓存和静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo list</span><br></pre></td></tr></table></figure>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure>
<h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure>
<h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure>
<h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure>
<h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure>
<h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure>
<h3 id="自定义CWD"><a href="#自定义CWD" class="headerlink" title="自定义CWD"></a>自定义CWD</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 配置</title>
    <url>/2018/10/29/hexo-learn-003/</url>
    <content><![CDATA[<p><strong>1. timezone</strong><br><strong>2. language</strong><br><strong>3. theme</strong><br><strong>4. deploy</strong></p>
<a id="more"></a>
<h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><ol>
<li>timezone: Asia/Shanghai <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a></li>
<li>language: zh-CN</li>
<li>theme: Hacker false代表禁用主题</li>
<li>deploy: 部署相关</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 建站</title>
    <url>/2018/10/29/hexo-learn-002/</url>
    <content><![CDATA[<p><strong>1. <code>_config.yml</code> 配置</strong><br><strong>2. <code>package.json</code> 应用信息</strong><br><strong>3. <code>scaffolds</code> 模板</strong><br><strong>4. <code>source</code> 资源</strong><br><strong>5. <code>theme</code> 主题</strong></p>
<a id="more"></a>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<ul>
<li><p>_config.yml<br>配置信息</p>
</li>
<li><p>package.json<br>应用信息和依赖。</p>
</li>
<li><p>scaffolds<br>模板。Hexo根据scaffold来生成文件。</p>
</li>
<li><p>source<br>资源文件夹，用来存放用户资源。</p>
</li>
<li><p>theme<br>主题。Hexo根据主题来生成静态页面。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo · 概述</title>
    <url>/2018/10/29/hexo-learn-001/</url>
    <content><![CDATA[<p><strong>1. <code>Hexo</code> 是一个快速、简洁且高效的博客框架</strong><br><strong>2. 安装<code>git</code></strong><br><strong>3. 安装<code>nodejs</code></strong><br><strong>4. 安装<code>hexo-cli</code></strong></p>
<a id="more"></a>
<h3 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h3><p>Hexo 是一个快速、简洁且高效的博客框架。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>安装git<br><a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">Git for Windows 国内下载站</a></li>
<li>安装nodejs<br><a href="http://nodejs.cn/" target="_blank" rel="noopener">Nodejs中文官网</a></li>
<li>安装hexo-cli<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo-blog</tag>
      </tags>
  </entry>
</search>
